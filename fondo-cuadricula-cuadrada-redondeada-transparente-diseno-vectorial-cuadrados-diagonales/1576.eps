%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: gm_bw_001_bcgr_003.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Zydd
%%CreationDate: 10/9/2017
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2017-10-09T12:02:24+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A5Qq13Oyjqf4DN8S8ijH1&#xA;e+eyTT3kJsEPJLbbirb/ABDb7XxHfMWOixjIcoH7w/xfo923JUGy8dxup6HMoG1XxxqV9SSoiBpt&#xA;1Y/yr/E9vuBjKRuhz+78fb8yFFTaxeXUEVpdSF7OHaCIUpFtT4P4gnfvvvmNDRQxyM4Cpy5n+d7/&#xA;AMbdNtlQckbRtQ0IIqrDow8RmVGQkFXIiqollFVP2E7sf+af8/lGUiTQ/s/b+Peoq61a81BY47+Y&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2017-10-09T12:02:24+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2017-10-09T12:02:24+02:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1000.000000</stDim:w>
            <stDim:h>1000.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:C887ADECD8ACE7118819A0305D8A91A2</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:C887ADECD8ACE7118819A0305D8A91A2</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:C887ADECD8ACE7118819A0305D8A91A2</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:C887ADECD8ACE7118819A0305D8A91A2</stEvt:instanceID>
                  <stEvt:when>2017-10-09T12:02:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
gsave
0 0 mo
1000 0 li
1000 1000 li
0 1000 li
0 0 li
cp
clp
0 0 mo
1000 0 li
1000 1000 li
0 1000 li
0 0 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.447059 .898039 .121569 rgb
f
10.1826 54.2725 mo
4.30371 48.3936 4.30371 42.5151 10.1826 36.6367 cv
36.6367 10.1826 li
42.5151 4.30371 48.394 4.30371 54.2725 10.1826 cv
80.7266 36.6367 li
86.605 42.5151 86.605 48.3936 80.7266 54.2725 cv
54.2725 80.7266 li
48.394 86.605 42.5151 86.605 36.6367 80.7266 cv
10.1826 54.2725 li
cp
.0196078 .317647 .431373 rgb
f
10.1826 145.182 mo
4.30371 139.303 4.30371 133.424 10.1826 127.545 cv
36.6367 101.092 li
42.5151 95.2129 48.394 95.2129 54.2725 101.092 cv
80.7266 127.545 li
86.605 133.424 86.605 139.303 80.7266 145.182 cv
54.2725 171.636 li
48.394 177.514 42.5151 177.514 36.6367 171.636 cv
10.1826 145.182 li
cp
f
10.1826 236.091 mo
4.30371 230.212 4.30371 224.333 10.1826 218.455 cv
36.6367 192.001 li
42.5151 186.122 48.394 186.122 54.2725 192.001 cv
80.7266 218.455 li
86.605 224.333 86.605 230.212 80.7266 236.091 cv
54.2725 262.545 li
48.394 268.423 42.5151 268.423 36.6367 262.545 cv
10.1826 236.091 li
cp
f
10.1826 327 mo
4.30371 321.121 4.30371 315.243 10.1826 309.364 cv
36.6367 282.91 li
42.5151 277.031 48.394 277.031 54.2725 282.91 cv
80.7266 309.364 li
86.605 315.243 86.605 321.121 80.7266 327 cv
54.2725 353.454 li
48.394 359.333 42.5151 359.333 36.6367 353.454 cv
10.1826 327 li
cp
f
10.1826 417.909 mo
4.30371 412.03 4.30371 406.151 10.1826 400.272 cv
36.6367 373.819 li
42.5151 367.94 48.394 367.94 54.2725 373.819 cv
80.7266 400.272 li
86.605 406.151 86.605 412.03 80.7266 417.909 cv
54.2725 444.363 li
48.394 450.241 42.5151 450.241 36.6367 444.363 cv
10.1826 417.909 li
cp
f
10.1826 508.818 mo
4.30371 502.939 4.30371 497.061 10.1826 491.182 cv
36.6367 464.728 li
42.5151 458.85 48.394 458.85 54.2725 464.728 cv
80.7266 491.182 li
86.605 497.061 86.605 502.939 80.7266 508.818 cv
54.2725 535.272 li
48.394 541.15 42.5151 541.15 36.6367 535.272 cv
10.1826 508.818 li
cp
f
10.1826 599.728 mo
4.30371 593.849 4.30371 587.97 10.1826 582.091 cv
36.6367 555.637 li
42.5151 549.759 48.394 549.759 54.2725 555.637 cv
80.7266 582.091 li
86.605 587.97 86.605 593.849 80.7266 599.728 cv
54.2725 626.181 li
48.394 632.06 42.5151 632.06 36.6367 626.181 cv
10.1826 599.728 li
cp
f
10.1826 690.636 mo
4.30371 684.758 4.30371 678.879 10.1826 673 cv
36.6367 646.546 li
42.5151 640.668 48.394 640.668 54.2725 646.546 cv
80.7266 673 li
86.605 678.879 86.605 684.758 80.7266 690.636 cv
54.2725 717.09 li
48.394 722.969 42.5151 722.969 36.6367 717.09 cv
10.1826 690.636 li
cp
f
10.1826 781.545 mo
4.30371 775.667 4.30371 769.788 10.1826 763.909 cv
36.6367 737.455 li
42.5151 731.576 48.394 731.576 54.2725 737.455 cv
80.7266 763.909 li
86.605 769.788 86.605 775.667 80.7266 781.545 cv
54.2725 807.999 li
48.394 813.878 42.5151 813.878 36.6367 807.999 cv
10.1826 781.545 li
cp
f
10.1826 872.454 mo
4.30371 866.576 4.30371 860.697 10.1826 854.818 cv
36.6367 828.364 li
42.5151 822.485 48.394 822.485 54.2725 828.364 cv
80.7266 854.818 li
86.605 860.697 86.605 866.576 80.7266 872.454 cv
54.2725 898.908 li
48.394 904.787 42.5151 904.787 36.6367 898.908 cv
10.1826 872.454 li
cp
f
10.1826 963.363 mo
4.30371 957.484 4.30371 951.606 10.1826 945.728 cv
36.6367 919.273 li
42.5151 913.395 48.394 913.395 54.2725 919.273 cv
80.7266 945.728 li
86.605 951.606 86.605 957.484 80.7266 963.363 cv
54.2725 989.817 li
48.394 995.696 42.5151 995.696 36.6367 989.817 cv
10.1826 963.363 li
cp
f
101.092 54.2725 mo
95.2129 48.3936 95.2129 42.5151 101.092 36.6367 cv
127.545 10.1826 li
133.424 4.30371 139.303 4.30371 145.182 10.1826 cv
171.636 36.6367 li
177.514 42.5151 177.514 48.3936 171.636 54.2725 cv
145.182 80.7266 li
139.303 86.605 133.424 86.605 127.545 80.7266 cv
101.092 54.2725 li
cp
f
101.092 145.182 mo
95.2129 139.303 95.2129 133.424 101.092 127.545 cv
127.545 101.092 li
133.424 95.2129 139.303 95.2129 145.182 101.092 cv
171.636 127.545 li
177.514 133.424 177.514 139.303 171.636 145.182 cv
145.182 171.636 li
139.303 177.514 133.424 177.514 127.545 171.636 cv
101.092 145.182 li
cp
f
101.092 236.091 mo
95.2129 230.212 95.2129 224.333 101.092 218.455 cv
127.545 192.001 li
133.424 186.122 139.303 186.122 145.182 192.001 cv
171.636 218.455 li
177.514 224.333 177.514 230.212 171.636 236.091 cv
145.182 262.545 li
139.303 268.423 133.424 268.423 127.545 262.545 cv
101.092 236.091 li
cp
f
101.092 327 mo
95.2129 321.121 95.2129 315.243 101.092 309.364 cv
127.545 282.91 li
133.424 277.031 139.303 277.031 145.182 282.91 cv
171.636 309.364 li
177.514 315.243 177.514 321.121 171.636 327 cv
145.182 353.454 li
139.303 359.333 133.424 359.333 127.545 353.454 cv
101.092 327 li
cp
f
101.092 417.909 mo
95.2129 412.03 95.2129 406.151 101.092 400.272 cv
127.545 373.819 li
133.424 367.94 139.303 367.94 145.182 373.819 cv
171.636 400.272 li
177.514 406.151 177.514 412.03 171.636 417.909 cv
145.182 444.363 li
139.303 450.241 133.424 450.241 127.545 444.363 cv
101.092 417.909 li
cp
f
101.092 508.818 mo
95.2129 502.939 95.2129 497.061 101.092 491.182 cv
127.545 464.728 li
133.424 458.85 139.303 458.85 145.182 464.728 cv
171.636 491.182 li
177.514 497.061 177.514 502.939 171.636 508.818 cv
145.182 535.272 li
139.303 541.15 133.424 541.15 127.545 535.272 cv
101.092 508.818 li
cp
f
101.092 599.728 mo
95.2129 593.849 95.2129 587.97 101.092 582.091 cv
127.545 555.637 li
133.424 549.759 139.303 549.759 145.182 555.637 cv
171.636 582.091 li
177.514 587.97 177.514 593.849 171.636 599.728 cv
145.182 626.181 li
139.303 632.06 133.424 632.06 127.545 626.181 cv
101.092 599.728 li
cp
f
101.092 690.636 mo
95.2129 684.758 95.2129 678.879 101.092 673 cv
127.545 646.546 li
133.424 640.668 139.303 640.668 145.182 646.546 cv
171.636 673 li
177.514 678.879 177.514 684.758 171.636 690.636 cv
145.182 717.09 li
139.303 722.969 133.424 722.969 127.545 717.09 cv
101.092 690.636 li
cp
f
101.092 781.545 mo
95.2129 775.667 95.2129 769.788 101.092 763.909 cv
127.545 737.455 li
133.424 731.576 139.303 731.576 145.182 737.455 cv
171.636 763.909 li
177.514 769.788 177.514 775.667 171.636 781.545 cv
145.182 807.999 li
139.303 813.878 133.424 813.878 127.545 807.999 cv
101.092 781.545 li
cp
f
101.092 872.454 mo
95.2129 866.576 95.2129 860.697 101.092 854.818 cv
127.545 828.364 li
133.424 822.485 139.303 822.485 145.182 828.364 cv
171.636 854.818 li
177.514 860.697 177.514 866.576 171.636 872.454 cv
145.182 898.908 li
139.303 904.787 133.424 904.787 127.545 898.908 cv
101.092 872.454 li
cp
f
101.092 963.363 mo
95.2129 957.484 95.2129 951.606 101.092 945.728 cv
127.545 919.273 li
133.424 913.395 139.303 913.395 145.182 919.273 cv
171.636 945.728 li
177.514 951.606 177.514 957.484 171.636 963.363 cv
145.182 989.817 li
139.303 995.696 133.424 995.696 127.545 989.817 cv
101.092 963.363 li
cp
f
192 54.2725 mo
186.122 48.3936 186.122 42.5151 192 36.6367 cv
218.455 10.1826 li
224.333 4.30371 230.212 4.30371 236.091 10.1826 cv
262.545 36.6367 li
268.423 42.5151 268.423 48.3936 262.545 54.2725 cv
236.091 80.7266 li
230.212 86.605 224.333 86.605 218.455 80.7266 cv
192 54.2725 li
cp
f
192 145.182 mo
186.122 139.303 186.122 133.424 192 127.545 cv
218.455 101.092 li
224.333 95.2129 230.212 95.2129 236.091 101.092 cv
262.545 127.545 li
268.423 133.424 268.423 139.303 262.545 145.182 cv
236.091 171.636 li
230.212 177.514 224.333 177.514 218.455 171.636 cv
192 145.182 li
cp
f
192 236.091 mo
186.122 230.212 186.122 224.333 192 218.455 cv
218.455 192.001 li
224.333 186.122 230.212 186.122 236.091 192.001 cv
262.545 218.455 li
268.423 224.333 268.423 230.212 262.545 236.091 cv
236.091 262.545 li
230.212 268.423 224.333 268.423 218.455 262.545 cv
192 236.091 li
cp
f
192 327 mo
186.122 321.121 186.122 315.243 192 309.364 cv
218.455 282.91 li
224.333 277.031 230.212 277.031 236.091 282.91 cv
262.545 309.364 li
268.423 315.243 268.423 321.121 262.545 327 cv
236.091 353.454 li
230.212 359.333 224.333 359.333 218.455 353.454 cv
192 327 li
cp
f
192 417.909 mo
186.122 412.03 186.122 406.151 192 400.272 cv
218.455 373.819 li
224.333 367.94 230.212 367.94 236.091 373.819 cv
262.545 400.272 li
268.423 406.151 268.423 412.03 262.545 417.909 cv
236.091 444.363 li
230.212 450.241 224.333 450.241 218.455 444.363 cv
192 417.909 li
cp
f
192 508.818 mo
186.122 502.939 186.122 497.061 192 491.182 cv
218.455 464.728 li
224.333 458.85 230.212 458.85 236.091 464.728 cv
262.545 491.182 li
268.423 497.061 268.423 502.939 262.545 508.818 cv
236.091 535.272 li
230.212 541.15 224.333 541.15 218.455 535.272 cv
192 508.818 li
cp
f
192 599.728 mo
186.122 593.849 186.122 587.97 192 582.091 cv
218.455 555.637 li
224.333 549.759 230.212 549.759 236.091 555.637 cv
262.545 582.091 li
268.423 587.97 268.423 593.849 262.545 599.728 cv
236.091 626.181 li
230.212 632.06 224.333 632.06 218.455 626.181 cv
192 599.728 li
cp
f
192 690.636 mo
186.122 684.758 186.122 678.879 192 673 cv
218.455 646.546 li
224.333 640.668 230.212 640.668 236.091 646.546 cv
262.545 673 li
268.423 678.879 268.423 684.758 262.545 690.636 cv
236.091 717.09 li
230.212 722.969 224.333 722.969 218.455 717.09 cv
192 690.636 li
cp
f
192 781.545 mo
186.122 775.667 186.122 769.788 192 763.909 cv
218.455 737.455 li
224.333 731.576 230.212 731.576 236.091 737.455 cv
262.545 763.909 li
268.423 769.788 268.423 775.667 262.545 781.545 cv
236.091 807.999 li
230.212 813.878 224.333 813.878 218.455 807.999 cv
192 781.545 li
cp
f
192 872.454 mo
186.122 866.576 186.122 860.697 192 854.818 cv
218.455 828.364 li
224.333 822.485 230.212 822.485 236.091 828.364 cv
262.545 854.818 li
268.423 860.697 268.423 866.576 262.545 872.454 cv
236.091 898.908 li
230.212 904.787 224.333 904.787 218.455 898.908 cv
192 872.454 li
cp
f
192 963.363 mo
186.122 957.484 186.122 951.606 192 945.728 cv
218.455 919.273 li
224.333 913.395 230.212 913.395 236.091 919.273 cv
262.545 945.728 li
268.423 951.606 268.423 957.484 262.545 963.363 cv
236.091 989.817 li
230.212 995.696 224.333 995.696 218.455 989.817 cv
192 963.363 li
cp
f
282.91 54.2725 mo
277.031 48.3936 277.031 42.5151 282.91 36.6367 cv
309.364 10.1826 li
315.242 4.30371 321.121 4.30371 327 10.1826 cv
353.454 36.6367 li
359.332 42.5151 359.332 48.3936 353.454 54.2725 cv
327 80.7266 li
321.121 86.605 315.242 86.605 309.364 80.7266 cv
282.91 54.2725 li
cp
f
282.91 145.182 mo
277.031 139.303 277.031 133.424 282.91 127.545 cv
309.364 101.092 li
315.242 95.2129 321.121 95.2129 327 101.092 cv
353.454 127.545 li
359.332 133.424 359.332 139.303 353.454 145.182 cv
327 171.636 li
321.121 177.514 315.242 177.514 309.364 171.636 cv
282.91 145.182 li
cp
f
282.91 236.091 mo
277.031 230.212 277.031 224.333 282.91 218.455 cv
309.364 192.001 li
315.242 186.122 321.121 186.122 327 192.001 cv
353.454 218.455 li
359.332 224.333 359.332 230.212 353.454 236.091 cv
327 262.545 li
321.121 268.423 315.242 268.423 309.364 262.545 cv
282.91 236.091 li
cp
f
282.91 327 mo
277.031 321.121 277.031 315.243 282.91 309.364 cv
309.364 282.91 li
315.242 277.031 321.121 277.031 327 282.91 cv
353.454 309.364 li
359.332 315.243 359.332 321.121 353.454 327 cv
327 353.454 li
321.121 359.333 315.242 359.333 309.364 353.454 cv
282.91 327 li
cp
f
282.91 417.909 mo
277.031 412.03 277.031 406.151 282.91 400.272 cv
309.364 373.819 li
315.242 367.94 321.121 367.94 327 373.819 cv
353.454 400.272 li
359.332 406.151 359.332 412.03 353.454 417.909 cv
327 444.363 li
321.121 450.241 315.242 450.241 309.364 444.363 cv
282.91 417.909 li
cp
f
282.91 508.818 mo
277.031 502.939 277.031 497.061 282.91 491.182 cv
309.364 464.728 li
315.242 458.85 321.121 458.85 327 464.728 cv
353.454 491.182 li
359.332 497.061 359.332 502.939 353.454 508.818 cv
327 535.272 li
321.121 541.15 315.242 541.15 309.364 535.272 cv
282.91 508.818 li
cp
f
282.91 599.728 mo
277.031 593.849 277.031 587.97 282.91 582.091 cv
309.364 555.637 li
315.242 549.759 321.121 549.759 327 555.637 cv
353.454 582.091 li
359.332 587.97 359.332 593.849 353.454 599.728 cv
327 626.181 li
321.121 632.06 315.242 632.06 309.364 626.181 cv
282.91 599.728 li
cp
f
282.91 690.636 mo
277.031 684.758 277.031 678.879 282.91 673 cv
309.364 646.546 li
315.242 640.668 321.121 640.668 327 646.546 cv
353.454 673 li
359.332 678.879 359.332 684.758 353.454 690.636 cv
327 717.09 li
321.121 722.969 315.242 722.969 309.364 717.09 cv
282.91 690.636 li
cp
f
282.91 781.545 mo
277.031 775.667 277.031 769.788 282.91 763.909 cv
309.364 737.455 li
315.242 731.576 321.121 731.576 327 737.455 cv
353.454 763.909 li
359.332 769.788 359.332 775.667 353.454 781.545 cv
327 807.999 li
321.121 813.878 315.242 813.878 309.364 807.999 cv
282.91 781.545 li
cp
f
282.91 872.454 mo
277.031 866.576 277.031 860.697 282.91 854.818 cv
309.364 828.364 li
315.242 822.485 321.121 822.485 327 828.364 cv
353.454 854.818 li
359.332 860.697 359.332 866.576 353.454 872.454 cv
327 898.908 li
321.121 904.787 315.242 904.787 309.364 898.908 cv
282.91 872.454 li
cp
f
282.91 963.363 mo
277.031 957.484 277.031 951.606 282.91 945.728 cv
309.364 919.273 li
315.242 913.395 321.121 913.395 327 919.273 cv
353.454 945.728 li
359.332 951.606 359.332 957.484 353.454 963.363 cv
327 989.817 li
321.121 995.696 315.242 995.696 309.364 989.817 cv
282.91 963.363 li
cp
f
373.819 54.2725 mo
367.94 48.3936 367.94 42.5151 373.819 36.6367 cv
400.272 10.1826 li
406.151 4.30371 412.03 4.30371 417.909 10.1826 cv
444.363 36.6367 li
450.241 42.5151 450.241 48.3936 444.363 54.2725 cv
417.909 80.7266 li
412.03 86.605 406.151 86.605 400.272 80.7266 cv
373.819 54.2725 li
cp
f
373.819 145.182 mo
367.94 139.303 367.94 133.424 373.819 127.545 cv
400.272 101.092 li
406.151 95.2129 412.03 95.2129 417.909 101.092 cv
444.363 127.545 li
450.241 133.424 450.241 139.303 444.363 145.182 cv
417.909 171.636 li
412.03 177.514 406.151 177.514 400.272 171.636 cv
373.819 145.182 li
cp
f
373.819 236.091 mo
367.94 230.212 367.94 224.333 373.819 218.455 cv
400.272 192.001 li
406.151 186.122 412.03 186.122 417.909 192.001 cv
444.363 218.455 li
450.241 224.333 450.241 230.212 444.363 236.091 cv
417.909 262.545 li
412.03 268.423 406.151 268.423 400.272 262.545 cv
373.819 236.091 li
cp
f
373.819 327 mo
367.94 321.121 367.94 315.243 373.819 309.364 cv
400.272 282.91 li
406.151 277.031 412.03 277.031 417.909 282.91 cv
444.363 309.364 li
450.241 315.243 450.241 321.121 444.363 327 cv
417.909 353.454 li
412.03 359.333 406.151 359.333 400.272 353.454 cv
373.819 327 li
cp
f
373.819 417.909 mo
367.94 412.03 367.94 406.151 373.819 400.272 cv
400.272 373.819 li
406.151 367.94 412.03 367.94 417.909 373.819 cv
444.363 400.272 li
450.241 406.151 450.241 412.03 444.363 417.909 cv
417.909 444.363 li
412.03 450.241 406.151 450.241 400.272 444.363 cv
373.819 417.909 li
cp
f
373.819 508.818 mo
367.94 502.939 367.94 497.061 373.819 491.182 cv
400.272 464.728 li
406.151 458.85 412.03 458.85 417.909 464.728 cv
444.363 491.182 li
450.241 497.061 450.241 502.939 444.363 508.818 cv
417.909 535.272 li
412.03 541.15 406.151 541.15 400.272 535.272 cv
373.819 508.818 li
cp
f
373.819 599.728 mo
367.94 593.849 367.94 587.97 373.819 582.091 cv
400.272 555.637 li
406.151 549.759 412.03 549.759 417.909 555.637 cv
444.363 582.091 li
450.241 587.97 450.241 593.849 444.363 599.728 cv
417.909 626.181 li
412.03 632.06 406.151 632.06 400.272 626.181 cv
373.819 599.728 li
cp
f
373.819 690.636 mo
367.94 684.758 367.94 678.879 373.819 673 cv
400.272 646.546 li
406.151 640.668 412.03 640.668 417.909 646.546 cv
444.363 673 li
450.241 678.879 450.241 684.758 444.363 690.636 cv
417.909 717.09 li
412.03 722.969 406.151 722.969 400.272 717.09 cv
373.819 690.636 li
cp
f
373.819 781.545 mo
367.94 775.667 367.94 769.788 373.819 763.909 cv
400.272 737.455 li
406.151 731.576 412.03 731.576 417.909 737.455 cv
444.363 763.909 li
450.241 769.788 450.241 775.667 444.363 781.545 cv
417.909 807.999 li
412.03 813.878 406.151 813.878 400.272 807.999 cv
373.819 781.545 li
cp
f
373.819 872.454 mo
367.94 866.576 367.94 860.697 373.819 854.818 cv
400.272 828.364 li
406.151 822.485 412.03 822.485 417.909 828.364 cv
444.363 854.818 li
450.241 860.697 450.241 866.576 444.363 872.454 cv
417.909 898.908 li
412.03 904.787 406.151 904.787 400.272 898.908 cv
373.819 872.454 li
cp
f
373.819 963.363 mo
367.94 957.484 367.94 951.606 373.819 945.728 cv
400.272 919.273 li
406.151 913.395 412.03 913.395 417.909 919.273 cv
444.363 945.728 li
450.241 951.606 450.241 957.484 444.363 963.363 cv
417.909 989.817 li
412.03 995.696 406.151 995.696 400.272 989.817 cv
373.819 963.363 li
cp
f
464.728 54.2725 mo
458.85 48.3936 458.85 42.5151 464.728 36.6367 cv
491.182 10.1826 li
497.061 4.30371 502.939 4.30371 508.818 10.1826 cv
535.271 36.6367 li
541.15 42.5151 541.15 48.3936 535.271 54.2725 cv
508.818 80.7266 li
502.939 86.605 497.061 86.605 491.182 80.7266 cv
464.728 54.2725 li
cp
f
464.728 145.182 mo
458.85 139.303 458.85 133.424 464.728 127.545 cv
491.182 101.092 li
497.061 95.2129 502.939 95.2129 508.818 101.092 cv
535.271 127.545 li
541.15 133.424 541.15 139.303 535.271 145.182 cv
508.818 171.636 li
502.939 177.514 497.061 177.514 491.182 171.636 cv
464.728 145.182 li
cp
f
464.728 236.091 mo
458.85 230.212 458.85 224.333 464.728 218.455 cv
491.182 192.001 li
497.061 186.122 502.939 186.122 508.818 192.001 cv
535.271 218.455 li
541.15 224.333 541.15 230.212 535.271 236.091 cv
508.818 262.545 li
502.939 268.423 497.061 268.423 491.182 262.545 cv
464.728 236.091 li
cp
f
464.728 327 mo
458.85 321.121 458.85 315.243 464.728 309.364 cv
491.182 282.91 li
497.061 277.031 502.939 277.031 508.818 282.91 cv
535.271 309.364 li
541.15 315.243 541.15 321.121 535.271 327 cv
508.818 353.454 li
502.939 359.333 497.061 359.333 491.182 353.454 cv
464.728 327 li
cp
f
464.728 417.909 mo
458.85 412.03 458.85 406.151 464.728 400.272 cv
491.182 373.819 li
497.061 367.94 502.939 367.94 508.818 373.819 cv
535.271 400.272 li
541.15 406.151 541.15 412.03 535.271 417.909 cv
508.818 444.363 li
502.939 450.241 497.061 450.241 491.182 444.363 cv
464.728 417.909 li
cp
f
464.728 508.818 mo
458.85 502.939 458.85 497.061 464.728 491.182 cv
491.182 464.728 li
497.061 458.85 502.939 458.85 508.818 464.728 cv
535.271 491.182 li
541.15 497.061 541.15 502.939 535.271 508.818 cv
508.818 535.272 li
502.939 541.15 497.061 541.15 491.182 535.272 cv
464.728 508.818 li
cp
f
464.728 599.728 mo
458.85 593.849 458.85 587.97 464.728 582.091 cv
491.182 555.637 li
497.061 549.759 502.939 549.759 508.818 555.637 cv
535.271 582.091 li
541.15 587.97 541.15 593.849 535.271 599.728 cv
508.818 626.181 li
502.939 632.06 497.061 632.06 491.182 626.181 cv
464.728 599.728 li
cp
f
464.728 690.636 mo
458.85 684.758 458.85 678.879 464.728 673 cv
491.182 646.546 li
497.061 640.668 502.939 640.668 508.818 646.546 cv
535.271 673 li
541.15 678.879 541.15 684.758 535.271 690.636 cv
508.818 717.09 li
502.939 722.969 497.061 722.969 491.182 717.09 cv
464.728 690.636 li
cp
f
464.728 781.545 mo
458.85 775.667 458.85 769.788 464.728 763.909 cv
491.182 737.455 li
497.061 731.576 502.939 731.576 508.818 737.455 cv
535.271 763.909 li
541.15 769.788 541.15 775.667 535.271 781.545 cv
508.818 807.999 li
502.939 813.878 497.061 813.878 491.182 807.999 cv
464.728 781.545 li
cp
f
464.728 872.454 mo
458.85 866.576 458.85 860.697 464.728 854.818 cv
491.182 828.364 li
497.061 822.485 502.939 822.485 508.818 828.364 cv
535.271 854.818 li
541.15 860.697 541.15 866.576 535.271 872.454 cv
508.818 898.908 li
502.939 904.787 497.061 904.787 491.182 898.908 cv
464.728 872.454 li
cp
f
464.728 963.363 mo
458.85 957.484 458.85 951.606 464.728 945.728 cv
491.182 919.273 li
497.061 913.395 502.939 913.395 508.818 919.273 cv
535.271 945.728 li
541.15 951.606 541.15 957.484 535.271 963.363 cv
508.818 989.817 li
502.939 995.696 497.061 995.696 491.182 989.817 cv
464.728 963.363 li
cp
f
555.637 54.2725 mo
549.759 48.3936 549.759 42.5151 555.637 36.6367 cv
582.091 10.1826 li
587.97 4.30371 593.849 4.30371 599.728 10.1826 cv
626.181 36.6367 li
632.06 42.5151 632.06 48.3936 626.181 54.2725 cv
599.728 80.7266 li
593.849 86.605 587.97 86.605 582.091 80.7266 cv
555.637 54.2725 li
cp
f
555.637 145.182 mo
549.759 139.303 549.759 133.424 555.637 127.545 cv
582.091 101.092 li
587.97 95.2129 593.849 95.2129 599.728 101.092 cv
626.181 127.545 li
632.06 133.424 632.06 139.303 626.181 145.182 cv
599.728 171.636 li
593.849 177.514 587.97 177.514 582.091 171.636 cv
555.637 145.182 li
cp
f
555.637 236.091 mo
549.759 230.212 549.759 224.333 555.637 218.455 cv
582.091 192.001 li
587.97 186.122 593.849 186.122 599.728 192.001 cv
626.181 218.455 li
632.06 224.333 632.06 230.212 626.181 236.091 cv
599.728 262.545 li
593.849 268.423 587.97 268.423 582.091 262.545 cv
555.637 236.091 li
cp
f
555.637 327 mo
549.759 321.121 549.759 315.243 555.637 309.364 cv
582.091 282.91 li
587.97 277.031 593.849 277.031 599.728 282.91 cv
626.181 309.364 li
632.06 315.243 632.06 321.121 626.181 327 cv
599.728 353.454 li
593.849 359.333 587.97 359.333 582.091 353.454 cv
555.637 327 li
cp
f
555.637 417.909 mo
549.759 412.03 549.759 406.151 555.637 400.272 cv
582.091 373.819 li
587.97 367.94 593.849 367.94 599.728 373.819 cv
626.181 400.272 li
632.06 406.151 632.06 412.03 626.181 417.909 cv
599.728 444.363 li
593.849 450.241 587.97 450.241 582.091 444.363 cv
555.637 417.909 li
cp
f
555.637 508.818 mo
549.759 502.939 549.759 497.061 555.637 491.182 cv
582.091 464.728 li
587.97 458.85 593.849 458.85 599.728 464.728 cv
626.181 491.182 li
632.06 497.061 632.06 502.939 626.181 508.818 cv
599.728 535.272 li
593.849 541.15 587.97 541.15 582.091 535.272 cv
555.637 508.818 li
cp
f
555.637 599.728 mo
549.759 593.849 549.759 587.97 555.637 582.091 cv
582.091 555.637 li
587.97 549.759 593.849 549.759 599.728 555.637 cv
626.181 582.091 li
632.06 587.97 632.06 593.849 626.181 599.728 cv
599.728 626.181 li
593.849 632.06 587.97 632.06 582.091 626.181 cv
555.637 599.728 li
cp
f
555.637 690.636 mo
549.759 684.758 549.759 678.879 555.637 673 cv
582.091 646.546 li
587.97 640.668 593.849 640.668 599.728 646.546 cv
626.181 673 li
632.06 678.879 632.06 684.758 626.181 690.636 cv
599.728 717.09 li
593.849 722.969 587.97 722.969 582.091 717.09 cv
555.637 690.636 li
cp
f
555.637 781.545 mo
549.759 775.667 549.759 769.788 555.637 763.909 cv
582.091 737.455 li
587.97 731.576 593.849 731.576 599.728 737.455 cv
626.181 763.909 li
632.06 769.788 632.06 775.667 626.181 781.545 cv
599.728 807.999 li
593.849 813.878 587.97 813.878 582.091 807.999 cv
555.637 781.545 li
cp
f
555.637 872.454 mo
549.759 866.576 549.759 860.697 555.637 854.818 cv
582.091 828.364 li
587.97 822.485 593.849 822.485 599.728 828.364 cv
626.181 854.818 li
632.06 860.697 632.06 866.576 626.181 872.454 cv
599.728 898.908 li
593.849 904.787 587.97 904.787 582.091 898.908 cv
555.637 872.454 li
cp
f
555.637 963.363 mo
549.759 957.484 549.759 951.606 555.637 945.728 cv
582.091 919.273 li
587.97 913.395 593.849 913.395 599.728 919.273 cv
626.181 945.728 li
632.06 951.606 632.06 957.484 626.181 963.363 cv
599.728 989.817 li
593.849 995.696 587.97 995.696 582.091 989.817 cv
555.637 963.363 li
cp
f
646.546 54.2725 mo
640.668 48.3936 640.668 42.5151 646.546 36.6367 cv
673 10.1826 li
678.879 4.30371 684.758 4.30371 690.636 10.1826 cv
717.09 36.6367 li
722.969 42.5151 722.969 48.3936 717.09 54.2725 cv
690.636 80.7266 li
684.758 86.605 678.879 86.605 673 80.7266 cv
646.546 54.2725 li
cp
f
646.546 145.182 mo
640.668 139.303 640.668 133.424 646.546 127.545 cv
673 101.092 li
678.879 95.2129 684.758 95.2129 690.636 101.092 cv
717.09 127.545 li
722.969 133.424 722.969 139.303 717.09 145.182 cv
690.636 171.636 li
684.758 177.514 678.879 177.514 673 171.636 cv
646.546 145.182 li
cp
f
646.546 236.091 mo
640.668 230.212 640.668 224.333 646.546 218.455 cv
673 192.001 li
678.879 186.122 684.758 186.122 690.636 192.001 cv
717.09 218.455 li
722.969 224.333 722.969 230.212 717.09 236.091 cv
690.636 262.545 li
684.758 268.423 678.879 268.423 673 262.545 cv
646.546 236.091 li
cp
f
646.546 327 mo
640.668 321.121 640.668 315.243 646.546 309.364 cv
673 282.91 li
678.879 277.031 684.758 277.031 690.636 282.91 cv
717.09 309.364 li
722.969 315.243 722.969 321.121 717.09 327 cv
690.636 353.454 li
684.758 359.333 678.879 359.333 673 353.454 cv
646.546 327 li
cp
f
646.546 417.909 mo
640.668 412.03 640.668 406.151 646.546 400.272 cv
673 373.819 li
678.879 367.94 684.758 367.94 690.636 373.819 cv
717.09 400.272 li
722.969 406.151 722.969 412.03 717.09 417.909 cv
690.636 444.363 li
684.758 450.241 678.879 450.241 673 444.363 cv
646.546 417.909 li
cp
f
646.546 508.818 mo
640.668 502.939 640.668 497.061 646.546 491.182 cv
673 464.728 li
678.879 458.85 684.758 458.85 690.636 464.728 cv
717.09 491.182 li
722.969 497.061 722.969 502.939 717.09 508.818 cv
690.636 535.272 li
684.758 541.15 678.879 541.15 673 535.272 cv
646.546 508.818 li
cp
f
646.546 599.728 mo
640.668 593.849 640.668 587.97 646.546 582.091 cv
673 555.637 li
678.879 549.759 684.758 549.759 690.636 555.637 cv
717.09 582.091 li
722.969 587.97 722.969 593.849 717.09 599.728 cv
690.636 626.181 li
684.758 632.06 678.879 632.06 673 626.181 cv
646.546 599.728 li
cp
f
646.546 690.636 mo
640.668 684.758 640.668 678.879 646.546 673 cv
673 646.546 li
678.879 640.668 684.758 640.668 690.636 646.546 cv
717.09 673 li
722.969 678.879 722.969 684.758 717.09 690.636 cv
690.636 717.09 li
684.758 722.969 678.879 722.969 673 717.09 cv
646.546 690.636 li
cp
f
646.546 781.545 mo
640.668 775.667 640.668 769.788 646.546 763.909 cv
673 737.455 li
678.879 731.576 684.758 731.576 690.636 737.455 cv
717.09 763.909 li
722.969 769.788 722.969 775.667 717.09 781.545 cv
690.636 807.999 li
684.758 813.878 678.879 813.878 673 807.999 cv
646.546 781.545 li
cp
f
646.546 872.454 mo
640.668 866.576 640.668 860.697 646.546 854.818 cv
673 828.364 li
678.879 822.485 684.758 822.485 690.636 828.364 cv
717.09 854.818 li
722.969 860.697 722.969 866.576 717.09 872.454 cv
690.636 898.908 li
684.758 904.787 678.879 904.787 673 898.908 cv
646.546 872.454 li
cp
f
646.546 963.363 mo
640.668 957.484 640.668 951.606 646.546 945.728 cv
673 919.273 li
678.879 913.395 684.758 913.395 690.636 919.273 cv
717.09 945.728 li
722.969 951.606 722.969 957.484 717.09 963.363 cv
690.636 989.817 li
684.758 995.696 678.879 995.696 673 989.817 cv
646.546 963.363 li
cp
f
737.455 54.2725 mo
731.576 48.3936 731.576 42.5151 737.455 36.6367 cv
763.909 10.1826 li
769.788 4.30371 775.667 4.30371 781.545 10.1826 cv
807.999 36.6367 li
813.878 42.5151 813.878 48.3936 807.999 54.2725 cv
781.545 80.7266 li
775.667 86.605 769.788 86.605 763.909 80.7266 cv
737.455 54.2725 li
cp
f
737.455 145.182 mo
731.576 139.303 731.576 133.424 737.455 127.545 cv
763.909 101.092 li
769.788 95.2129 775.667 95.2129 781.545 101.092 cv
807.999 127.545 li
813.878 133.424 813.878 139.303 807.999 145.182 cv
781.545 171.636 li
775.667 177.514 769.788 177.514 763.909 171.636 cv
737.455 145.182 li
cp
f
737.455 236.091 mo
731.576 230.212 731.576 224.333 737.455 218.455 cv
763.909 192.001 li
769.788 186.122 775.667 186.122 781.545 192.001 cv
807.999 218.455 li
813.878 224.333 813.878 230.212 807.999 236.091 cv
781.545 262.545 li
775.667 268.423 769.788 268.423 763.909 262.545 cv
737.455 236.091 li
cp
f
737.455 327 mo
731.576 321.121 731.576 315.243 737.455 309.364 cv
763.909 282.91 li
769.788 277.031 775.667 277.031 781.545 282.91 cv
807.999 309.364 li
813.878 315.243 813.878 321.121 807.999 327 cv
781.545 353.454 li
775.667 359.333 769.788 359.333 763.909 353.454 cv
737.455 327 li
cp
f
737.455 417.909 mo
731.576 412.03 731.576 406.151 737.455 400.272 cv
763.909 373.819 li
769.788 367.94 775.667 367.94 781.545 373.819 cv
807.999 400.272 li
813.878 406.151 813.878 412.03 807.999 417.909 cv
781.545 444.363 li
775.667 450.241 769.788 450.241 763.909 444.363 cv
737.455 417.909 li
cp
f
737.455 508.818 mo
731.576 502.939 731.576 497.061 737.455 491.182 cv
763.909 464.728 li
769.788 458.85 775.667 458.85 781.545 464.728 cv
807.999 491.182 li
813.878 497.061 813.878 502.939 807.999 508.818 cv
781.545 535.272 li
775.667 541.15 769.788 541.15 763.909 535.272 cv
737.455 508.818 li
cp
f
737.455 599.728 mo
731.576 593.849 731.576 587.97 737.455 582.091 cv
763.909 555.637 li
769.788 549.759 775.667 549.759 781.545 555.637 cv
807.999 582.091 li
813.878 587.97 813.878 593.849 807.999 599.728 cv
781.545 626.181 li
775.667 632.06 769.788 632.06 763.909 626.181 cv
737.455 599.728 li
cp
f
737.455 690.636 mo
731.576 684.758 731.576 678.879 737.455 673 cv
763.909 646.546 li
769.788 640.668 775.667 640.668 781.545 646.546 cv
807.999 673 li
813.878 678.879 813.878 684.758 807.999 690.636 cv
781.545 717.09 li
775.667 722.969 769.788 722.969 763.909 717.09 cv
737.455 690.636 li
cp
f
737.455 781.545 mo
731.576 775.667 731.576 769.788 737.455 763.909 cv
763.909 737.455 li
769.788 731.576 775.667 731.576 781.545 737.455 cv
807.999 763.909 li
813.878 769.788 813.878 775.667 807.999 781.545 cv
781.545 807.999 li
775.667 813.878 769.788 813.878 763.909 807.999 cv
737.455 781.545 li
cp
f
737.455 872.454 mo
731.576 866.576 731.576 860.697 737.455 854.818 cv
763.909 828.364 li
769.788 822.485 775.667 822.485 781.545 828.364 cv
807.999 854.818 li
813.878 860.697 813.878 866.576 807.999 872.454 cv
781.545 898.908 li
775.667 904.787 769.788 904.787 763.909 898.908 cv
737.455 872.454 li
cp
f
737.455 963.363 mo
731.576 957.484 731.576 951.606 737.455 945.728 cv
763.909 919.273 li
769.788 913.395 775.667 913.395 781.545 919.273 cv
807.999 945.728 li
813.878 951.606 813.878 957.484 807.999 963.363 cv
781.545 989.817 li
775.667 995.696 769.788 995.696 763.909 989.817 cv
737.455 963.363 li
cp
f
828.364 54.2725 mo
822.485 48.3936 822.485 42.5151 828.364 36.6367 cv
854.818 10.1826 li
860.697 4.30371 866.576 4.30371 872.454 10.1826 cv
898.908 36.6367 li
904.787 42.5151 904.787 48.3936 898.908 54.2725 cv
872.454 80.7266 li
866.576 86.605 860.697 86.605 854.818 80.7266 cv
828.364 54.2725 li
cp
f
828.364 145.182 mo
822.485 139.303 822.485 133.424 828.364 127.545 cv
854.818 101.092 li
860.697 95.2129 866.576 95.2129 872.454 101.092 cv
898.908 127.545 li
904.787 133.424 904.787 139.303 898.908 145.182 cv
872.454 171.636 li
866.576 177.514 860.697 177.514 854.818 171.636 cv
828.364 145.182 li
cp
f
828.364 236.091 mo
822.485 230.212 822.485 224.333 828.364 218.455 cv
854.818 192.001 li
860.697 186.122 866.576 186.122 872.454 192.001 cv
898.908 218.455 li
904.787 224.333 904.787 230.212 898.908 236.091 cv
872.454 262.545 li
866.576 268.423 860.697 268.423 854.818 262.545 cv
828.364 236.091 li
cp
f
828.364 327 mo
822.485 321.121 822.485 315.243 828.364 309.364 cv
854.818 282.91 li
860.697 277.031 866.576 277.031 872.454 282.91 cv
898.908 309.364 li
904.787 315.243 904.787 321.121 898.908 327 cv
872.454 353.454 li
866.576 359.333 860.697 359.333 854.818 353.454 cv
828.364 327 li
cp
f
828.364 417.909 mo
822.485 412.03 822.485 406.151 828.364 400.272 cv
854.818 373.819 li
860.697 367.94 866.576 367.94 872.454 373.819 cv
898.908 400.272 li
904.787 406.151 904.787 412.03 898.908 417.909 cv
872.454 444.363 li
866.576 450.241 860.697 450.241 854.818 444.363 cv
828.364 417.909 li
cp
f
828.364 508.818 mo
822.485 502.939 822.485 497.061 828.364 491.182 cv
854.818 464.728 li
860.697 458.85 866.576 458.85 872.454 464.728 cv
898.908 491.182 li
904.787 497.061 904.787 502.939 898.908 508.818 cv
872.454 535.272 li
866.576 541.15 860.697 541.15 854.818 535.272 cv
828.364 508.818 li
cp
f
828.364 599.728 mo
822.485 593.849 822.485 587.97 828.364 582.091 cv
854.818 555.637 li
860.697 549.759 866.576 549.759 872.454 555.637 cv
898.908 582.091 li
904.787 587.97 904.787 593.849 898.908 599.728 cv
872.454 626.181 li
866.576 632.06 860.697 632.06 854.818 626.181 cv
828.364 599.728 li
cp
f
828.364 690.636 mo
822.485 684.758 822.485 678.879 828.364 673 cv
854.818 646.546 li
860.697 640.668 866.576 640.668 872.454 646.546 cv
898.908 673 li
904.787 678.879 904.787 684.758 898.908 690.636 cv
872.454 717.09 li
866.576 722.969 860.697 722.969 854.818 717.09 cv
828.364 690.636 li
cp
f
828.364 781.545 mo
822.485 775.667 822.485 769.788 828.364 763.909 cv
854.818 737.455 li
860.697 731.576 866.576 731.576 872.454 737.455 cv
898.908 763.909 li
904.787 769.788 904.787 775.667 898.908 781.545 cv
872.454 807.999 li
866.576 813.878 860.697 813.878 854.818 807.999 cv
828.364 781.545 li
cp
f
828.364 872.454 mo
822.485 866.576 822.485 860.697 828.364 854.818 cv
854.818 828.364 li
860.697 822.485 866.576 822.485 872.454 828.364 cv
898.908 854.818 li
904.787 860.697 904.787 866.576 898.908 872.454 cv
872.454 898.908 li
866.576 904.787 860.697 904.787 854.818 898.908 cv
828.364 872.454 li
cp
f
828.364 963.363 mo
822.485 957.484 822.485 951.606 828.364 945.728 cv
854.818 919.273 li
860.697 913.395 866.576 913.395 872.454 919.273 cv
898.908 945.728 li
904.787 951.606 904.787 957.484 898.908 963.363 cv
872.454 989.817 li
866.576 995.696 860.697 995.696 854.818 989.817 cv
828.364 963.363 li
cp
f
919.273 54.2725 mo
913.395 48.3936 913.395 42.5151 919.273 36.6367 cv
945.728 10.1826 li
951.606 4.30371 957.484 4.30371 963.363 10.1826 cv
989.817 36.6367 li
995.696 42.5151 995.696 48.3936 989.817 54.2725 cv
963.363 80.7266 li
957.484 86.605 951.606 86.605 945.728 80.7266 cv
919.273 54.2725 li
cp
f
919.273 145.182 mo
913.395 139.303 913.395 133.424 919.273 127.545 cv
945.728 101.092 li
951.606 95.2129 957.484 95.2129 963.363 101.092 cv
989.817 127.545 li
995.696 133.424 995.696 139.303 989.817 145.182 cv
963.363 171.636 li
957.484 177.514 951.606 177.514 945.728 171.636 cv
919.273 145.182 li
cp
f
919.273 236.091 mo
913.395 230.212 913.395 224.333 919.273 218.455 cv
945.728 192.001 li
951.606 186.122 957.484 186.122 963.363 192.001 cv
989.817 218.455 li
995.696 224.333 995.696 230.212 989.817 236.091 cv
963.363 262.545 li
957.484 268.423 951.606 268.423 945.728 262.545 cv
919.273 236.091 li
cp
f
919.273 327 mo
913.395 321.121 913.395 315.243 919.273 309.364 cv
945.728 282.91 li
951.606 277.031 957.484 277.031 963.363 282.91 cv
989.817 309.364 li
995.696 315.243 995.696 321.121 989.817 327 cv
963.363 353.454 li
957.484 359.333 951.606 359.333 945.728 353.454 cv
919.273 327 li
cp
f
919.273 417.909 mo
913.395 412.03 913.395 406.151 919.273 400.272 cv
945.728 373.819 li
951.606 367.94 957.484 367.94 963.363 373.819 cv
989.817 400.272 li
995.696 406.151 995.696 412.03 989.817 417.909 cv
963.363 444.363 li
957.484 450.241 951.606 450.241 945.728 444.363 cv
919.273 417.909 li
cp
f
919.273 508.818 mo
913.395 502.939 913.395 497.061 919.273 491.182 cv
945.728 464.728 li
951.606 458.85 957.484 458.85 963.363 464.728 cv
989.817 491.182 li
995.696 497.061 995.696 502.939 989.817 508.818 cv
963.363 535.272 li
957.484 541.15 951.606 541.15 945.728 535.272 cv
919.273 508.818 li
cp
f
919.273 599.728 mo
913.395 593.849 913.395 587.97 919.273 582.091 cv
945.728 555.637 li
951.606 549.759 957.484 549.759 963.363 555.637 cv
989.817 582.091 li
995.696 587.97 995.696 593.849 989.817 599.728 cv
963.363 626.181 li
957.484 632.06 951.606 632.06 945.728 626.181 cv
919.273 599.728 li
cp
f
919.273 690.636 mo
913.395 684.758 913.395 678.879 919.273 673 cv
945.728 646.546 li
951.606 640.668 957.484 640.668 963.363 646.546 cv
989.817 673 li
995.696 678.879 995.696 684.758 989.817 690.636 cv
963.363 717.09 li
957.484 722.969 951.606 722.969 945.728 717.09 cv
919.273 690.636 li
cp
f
919.273 781.545 mo
913.395 775.667 913.395 769.788 919.273 763.909 cv
945.728 737.455 li
951.606 731.576 957.484 731.576 963.363 737.455 cv
989.817 763.909 li
995.696 769.788 995.696 775.667 989.817 781.545 cv
963.363 807.999 li
957.484 813.878 951.606 813.878 945.728 807.999 cv
919.273 781.545 li
cp
f
919.273 872.454 mo
913.395 866.576 913.395 860.697 919.273 854.818 cv
945.728 828.364 li
951.606 822.485 957.484 822.485 963.363 828.364 cv
989.817 854.818 li
995.696 860.697 995.696 866.576 989.817 872.454 cv
963.363 898.908 li
957.484 904.787 951.606 904.787 945.728 898.908 cv
919.273 872.454 li
cp
f
919.273 963.363 mo
913.395 957.484 913.395 951.606 919.273 945.728 cv
945.728 919.273 li
951.606 913.395 957.484 913.395 963.363 919.273 cv
989.817 945.728 li
995.696 951.606 995.696 957.484 989.817 963.363 cv
963.363 989.817 li
957.484 995.696 951.606 995.696 945.728 989.817 cv
919.273 963.363 li
cp
f
-35.272 8.81787 mo
-41.1509 2.93945 -41.1509 -2.93945 -35.272 -8.81787 cv
-8.81787 -35.272 li
-2.93945 -41.1509 2.93945 -41.1509 8.81787 -35.272 cv
35.272 -8.81787 li
41.1509 -2.93945 41.1509 2.93945 35.272 8.81787 cv
8.81787 35.272 li
2.93945 41.1509 -2.93945 41.1509 -8.81787 35.272 cv
-35.272 8.81787 li
cp
f
-35.272 99.7271 mo
-41.1509 93.8486 -41.1509 87.9697 -35.272 82.0913 cv
-8.81787 55.6372 li
-2.93945 49.7583 2.93945 49.7583 8.81787 55.6372 cv
35.272 82.0913 li
41.1509 87.9697 41.1509 93.8486 35.272 99.7271 cv
8.81787 126.181 li
2.93945 132.06 -2.93945 132.06 -8.81787 126.181 cv
-35.272 99.7271 li
cp
f
-35.272 190.636 mo
-41.1509 184.758 -41.1509 178.879 -35.272 173 cv
-8.81787 146.546 li
-2.93945 140.667 2.93945 140.667 8.81787 146.546 cv
35.272 173 li
41.1509 178.879 41.1509 184.758 35.272 190.636 cv
8.81787 217.09 li
2.93945 222.969 -2.93945 222.969 -8.81787 217.09 cv
-35.272 190.636 li
cp
f
-35.272 281.545 mo
-41.1509 275.667 -41.1509 269.788 -35.272 263.909 cv
-8.81787 237.455 li
-2.93945 231.577 2.93945 231.577 8.81787 237.455 cv
35.272 263.909 li
41.1509 269.788 41.1509 275.667 35.272 281.545 cv
8.81787 308 li
2.93945 313.878 -2.93945 313.878 -8.81787 308 cv
-35.272 281.545 li
cp
f
-35.272 372.455 mo
-41.1509 366.576 -41.1509 360.697 -35.272 354.818 cv
-8.81787 328.364 li
-2.93945 322.486 2.93945 322.486 8.81787 328.364 cv
35.272 354.818 li
41.1509 360.697 41.1509 366.576 35.272 372.455 cv
8.81787 398.908 li
2.93945 404.787 -2.93945 404.787 -8.81787 398.908 cv
-35.272 372.455 li
cp
f
-35.272 463.363 mo
-41.1509 457.484 -41.1509 451.606 -35.272 445.728 cv
-8.81787 419.273 li
-2.93945 413.395 2.93945 413.395 8.81787 419.273 cv
35.272 445.728 li
41.1509 451.606 41.1509 457.484 35.272 463.363 cv
8.81787 489.817 li
2.93945 495.696 -2.93945 495.696 -8.81787 489.817 cv
-35.272 463.363 li
cp
f
-35.272 554.272 mo
-41.1509 548.394 -41.1509 542.516 -35.272 536.637 cv
-8.81787 510.183 li
-2.93945 504.304 2.93945 504.304 8.81787 510.183 cv
35.272 536.637 li
41.1509 542.516 41.1509 548.394 35.272 554.272 cv
8.81787 580.727 li
2.93945 586.605 -2.93945 586.605 -8.81787 580.727 cv
-35.272 554.272 li
cp
f
-35.272 645.182 mo
-41.1509 639.303 -41.1509 633.424 -35.272 627.546 cv
-8.81787 601.092 li
-2.93945 595.213 2.93945 595.213 8.81787 601.092 cv
35.272 627.546 li
41.1509 633.424 41.1509 639.303 35.272 645.182 cv
8.81787 671.636 li
2.93945 677.515 -2.93945 677.515 -8.81787 671.636 cv
-35.272 645.182 li
cp
f
-35.272 736.091 mo
-41.1509 730.212 -41.1509 724.333 -35.272 718.455 cv
-8.81787 692.001 li
-2.93945 686.122 2.93945 686.122 8.81787 692.001 cv
35.272 718.455 li
41.1509 724.333 41.1509 730.212 35.272 736.091 cv
8.81787 762.545 li
2.93945 768.424 -2.93945 768.424 -8.81787 762.545 cv
-35.272 736.091 li
cp
f
-35.272 827 mo
-41.1509 821.121 -41.1509 815.242 -35.272 809.364 cv
-8.81787 782.91 li
-2.93945 777.031 2.93945 777.031 8.81787 782.91 cv
35.272 809.364 li
41.1509 815.242 41.1509 821.121 35.272 827 cv
8.81787 853.454 li
2.93945 859.332 -2.93945 859.332 -8.81787 853.454 cv
-35.272 827 li
cp
f
-35.272 917.909 mo
-41.1509 912.03 -41.1509 906.151 -35.272 900.272 cv
-8.81787 873.819 li
-2.93945 867.94 2.93945 867.94 8.81787 873.819 cv
35.272 900.272 li
41.1509 906.151 41.1509 912.03 35.272 917.909 cv
8.81787 944.363 li
2.93945 950.241 -2.93945 950.241 -8.81787 944.363 cv
-35.272 917.909 li
cp
f
-35.272 1008.82 mo
-41.1509 1002.94 -41.1509 997.061 -35.272 991.182 cv
-8.81787 964.728 li
-2.93945 958.85 2.93945 958.85 8.81787 964.728 cv
35.272 991.182 li
41.1509 997.061 41.1509 1002.94 35.272 1008.82 cv
8.81787 1035.27 li
2.93945 1041.15 -2.93945 1041.15 -8.81787 1035.27 cv
-35.272 1008.82 li
cp
f
55.6372 8.81787 mo
49.7583 2.93945 49.7583 -2.93945 55.6372 -8.81787 cv
82.0913 -35.272 li
87.9697 -41.1509 93.8486 -41.1509 99.7271 -35.272 cv
126.181 -8.81787 li
132.06 -2.93945 132.06 2.93945 126.181 8.81787 cv
99.7271 35.272 li
93.8486 41.1509 87.9697 41.1509 82.0913 35.272 cv
55.6372 8.81787 li
cp
f
55.6372 99.7271 mo
49.7583 93.8486 49.7583 87.9697 55.6372 82.0913 cv
82.0913 55.6372 li
87.9697 49.7583 93.8486 49.7583 99.7271 55.6372 cv
126.181 82.0913 li
132.06 87.9697 132.06 93.8486 126.181 99.7271 cv
99.7271 126.181 li
93.8486 132.06 87.9697 132.06 82.0913 126.181 cv
55.6372 99.7271 li
cp
f
55.6372 190.636 mo
49.7583 184.758 49.7583 178.879 55.6372 173 cv
82.0913 146.546 li
87.9697 140.667 93.8486 140.667 99.7271 146.546 cv
126.181 173 li
132.06 178.879 132.06 184.758 126.181 190.636 cv
99.7271 217.09 li
93.8486 222.969 87.9697 222.969 82.0913 217.09 cv
55.6372 190.636 li
cp
f
55.6372 281.545 mo
49.7583 275.667 49.7583 269.788 55.6372 263.909 cv
82.0913 237.455 li
87.9697 231.577 93.8486 231.577 99.7271 237.455 cv
126.181 263.909 li
132.06 269.788 132.06 275.667 126.181 281.545 cv
99.7271 308 li
93.8486 313.878 87.9697 313.878 82.0913 308 cv
55.6372 281.545 li
cp
f
55.6372 372.455 mo
49.7583 366.576 49.7583 360.697 55.6372 354.818 cv
82.0913 328.364 li
87.9697 322.486 93.8486 322.486 99.7271 328.364 cv
126.181 354.818 li
132.06 360.697 132.06 366.576 126.181 372.455 cv
99.7271 398.908 li
93.8486 404.787 87.9697 404.787 82.0913 398.908 cv
55.6372 372.455 li
cp
f
55.6372 463.363 mo
49.7583 457.484 49.7583 451.606 55.6372 445.728 cv
82.0913 419.273 li
87.9697 413.395 93.8486 413.395 99.7271 419.273 cv
126.181 445.728 li
132.06 451.606 132.06 457.484 126.181 463.363 cv
99.7271 489.817 li
93.8486 495.696 87.9697 495.696 82.0913 489.817 cv
55.6372 463.363 li
cp
f
55.6372 554.272 mo
49.7583 548.394 49.7583 542.516 55.6372 536.637 cv
82.0913 510.183 li
87.9697 504.304 93.8486 504.304 99.7271 510.183 cv
126.181 536.637 li
132.06 542.516 132.06 548.394 126.181 554.272 cv
99.7271 580.727 li
93.8486 586.605 87.9697 586.605 82.0913 580.727 cv
55.6372 554.272 li
cp
f
55.6372 645.182 mo
49.7583 639.303 49.7583 633.424 55.6372 627.546 cv
82.0913 601.092 li
87.9697 595.213 93.8486 595.213 99.7271 601.092 cv
126.181 627.546 li
132.06 633.424 132.06 639.303 126.181 645.182 cv
99.7271 671.636 li
93.8486 677.515 87.9697 677.515 82.0913 671.636 cv
55.6372 645.182 li
cp
f
55.6372 736.091 mo
49.7583 730.212 49.7583 724.333 55.6372 718.455 cv
82.0913 692.001 li
87.9697 686.122 93.8486 686.122 99.7271 692.001 cv
126.181 718.455 li
132.06 724.333 132.06 730.212 126.181 736.091 cv
99.7271 762.545 li
93.8486 768.424 87.9697 768.424 82.0913 762.545 cv
55.6372 736.091 li
cp
f
55.6372 827 mo
49.7583 821.121 49.7583 815.242 55.6372 809.364 cv
82.0913 782.91 li
87.9697 777.031 93.8486 777.031 99.7271 782.91 cv
126.181 809.364 li
132.06 815.242 132.06 821.121 126.181 827 cv
99.7271 853.454 li
93.8486 859.332 87.9697 859.332 82.0913 853.454 cv
55.6372 827 li
cp
f
55.6372 917.909 mo
49.7583 912.03 49.7583 906.151 55.6372 900.272 cv
82.0913 873.819 li
87.9697 867.94 93.8486 867.94 99.7271 873.819 cv
126.181 900.272 li
132.06 906.151 132.06 912.03 126.181 917.909 cv
99.7271 944.363 li
93.8486 950.241 87.9697 950.241 82.0913 944.363 cv
55.6372 917.909 li
cp
f
55.6372 1008.82 mo
49.7583 1002.94 49.7583 997.061 55.6372 991.182 cv
82.0913 964.728 li
87.9697 958.85 93.8486 958.85 99.7271 964.728 cv
126.181 991.182 li
132.06 997.061 132.06 1002.94 126.181 1008.82 cv
99.7271 1035.27 li
93.8486 1041.15 87.9697 1041.15 82.0913 1035.27 cv
55.6372 1008.82 li
cp
f
146.546 8.81787 mo
140.667 2.93945 140.667 -2.93945 146.546 -8.81787 cv
173 -35.272 li
178.879 -41.1509 184.757 -41.1509 190.636 -35.272 cv
217.09 -8.81787 li
222.969 -2.93945 222.969 2.93945 217.09 8.81787 cv
190.636 35.272 li
184.757 41.1509 178.879 41.1509 173 35.272 cv
146.546 8.81787 li
cp
f
146.546 99.7271 mo
140.667 93.8486 140.667 87.9697 146.546 82.0913 cv
173 55.6372 li
178.879 49.7583 184.757 49.7583 190.636 55.6372 cv
217.09 82.0913 li
222.969 87.9697 222.969 93.8486 217.09 99.7271 cv
190.636 126.181 li
184.757 132.06 178.879 132.06 173 126.181 cv
146.546 99.7271 li
cp
f
146.546 190.636 mo
140.667 184.758 140.667 178.879 146.546 173 cv
173 146.546 li
178.879 140.667 184.757 140.667 190.636 146.546 cv
217.09 173 li
222.969 178.879 222.969 184.758 217.09 190.636 cv
190.636 217.09 li
184.757 222.969 178.879 222.969 173 217.09 cv
146.546 190.636 li
cp
f
146.546 281.545 mo
140.667 275.667 140.667 269.788 146.546 263.909 cv
173 237.455 li
178.879 231.577 184.757 231.577 190.636 237.455 cv
217.09 263.909 li
222.969 269.788 222.969 275.667 217.09 281.545 cv
190.636 308 li
184.757 313.878 178.879 313.878 173 308 cv
146.546 281.545 li
cp
f
146.546 372.455 mo
140.667 366.576 140.667 360.697 146.546 354.818 cv
173 328.364 li
178.879 322.486 184.757 322.486 190.636 328.364 cv
217.09 354.818 li
222.969 360.697 222.969 366.576 217.09 372.455 cv
190.636 398.908 li
184.757 404.787 178.879 404.787 173 398.908 cv
146.546 372.455 li
cp
f
146.546 463.363 mo
140.667 457.484 140.667 451.606 146.546 445.728 cv
173 419.273 li
178.879 413.395 184.757 413.395 190.636 419.273 cv
217.09 445.728 li
222.969 451.606 222.969 457.484 217.09 463.363 cv
190.636 489.817 li
184.757 495.696 178.879 495.696 173 489.817 cv
146.546 463.363 li
cp
f
146.546 554.272 mo
140.667 548.394 140.667 542.516 146.546 536.637 cv
173 510.183 li
178.879 504.304 184.757 504.304 190.636 510.183 cv
217.09 536.637 li
222.969 542.516 222.969 548.394 217.09 554.272 cv
190.636 580.727 li
184.757 586.605 178.879 586.605 173 580.727 cv
146.546 554.272 li
cp
f
146.546 645.182 mo
140.667 639.303 140.667 633.424 146.546 627.546 cv
173 601.092 li
178.879 595.213 184.757 595.213 190.636 601.092 cv
217.09 627.546 li
222.969 633.424 222.969 639.303 217.09 645.182 cv
190.636 671.636 li
184.757 677.515 178.879 677.515 173 671.636 cv
146.546 645.182 li
cp
f
146.546 736.091 mo
140.667 730.212 140.667 724.333 146.546 718.455 cv
173 692.001 li
178.879 686.122 184.757 686.122 190.636 692.001 cv
217.09 718.455 li
222.969 724.333 222.969 730.212 217.09 736.091 cv
190.636 762.545 li
184.757 768.424 178.879 768.424 173 762.545 cv
146.546 736.091 li
cp
f
146.546 827 mo
140.667 821.121 140.667 815.242 146.546 809.364 cv
173 782.91 li
178.879 777.031 184.757 777.031 190.636 782.91 cv
217.09 809.364 li
222.969 815.242 222.969 821.121 217.09 827 cv
190.636 853.454 li
184.757 859.332 178.879 859.332 173 853.454 cv
146.546 827 li
cp
f
146.546 917.909 mo
140.667 912.03 140.667 906.151 146.546 900.272 cv
173 873.819 li
178.879 867.94 184.757 867.94 190.636 873.819 cv
217.09 900.272 li
222.969 906.151 222.969 912.03 217.09 917.909 cv
190.636 944.363 li
184.757 950.241 178.879 950.241 173 944.363 cv
146.546 917.909 li
cp
f
146.546 1008.82 mo
140.667 1002.94 140.667 997.061 146.546 991.182 cv
173 964.728 li
178.879 958.85 184.757 958.85 190.636 964.728 cv
217.09 991.182 li
222.969 997.061 222.969 1002.94 217.09 1008.82 cv
190.636 1035.27 li
184.757 1041.15 178.879 1041.15 173 1035.27 cv
146.546 1008.82 li
cp
f
237.455 8.81787 mo
231.577 2.93945 231.577 -2.93945 237.455 -8.81787 cv
263.909 -35.272 li
269.788 -41.1509 275.667 -41.1509 281.545 -35.272 cv
307.999 -8.81787 li
313.878 -2.93945 313.878 2.93945 307.999 8.81787 cv
281.545 35.272 li
275.667 41.1509 269.788 41.1509 263.909 35.272 cv
237.455 8.81787 li
cp
f
237.455 99.7271 mo
231.577 93.8486 231.577 87.9697 237.455 82.0913 cv
263.909 55.6372 li
269.788 49.7583 275.667 49.7583 281.545 55.6372 cv
307.999 82.0913 li
313.878 87.9697 313.878 93.8486 307.999 99.7271 cv
281.545 126.181 li
275.667 132.06 269.788 132.06 263.909 126.181 cv
237.455 99.7271 li
cp
f
237.455 190.636 mo
231.577 184.758 231.577 178.879 237.455 173 cv
263.909 146.546 li
269.788 140.667 275.667 140.667 281.545 146.546 cv
307.999 173 li
313.878 178.879 313.878 184.758 307.999 190.636 cv
281.545 217.09 li
275.667 222.969 269.788 222.969 263.909 217.09 cv
237.455 190.636 li
cp
f
237.455 281.545 mo
231.577 275.667 231.577 269.788 237.455 263.909 cv
263.909 237.455 li
269.788 231.577 275.667 231.577 281.545 237.455 cv
307.999 263.909 li
313.878 269.788 313.878 275.667 307.999 281.545 cv
281.545 308 li
275.667 313.878 269.788 313.878 263.909 308 cv
237.455 281.545 li
cp
f
237.455 372.455 mo
231.577 366.576 231.577 360.697 237.455 354.818 cv
263.909 328.364 li
269.788 322.486 275.667 322.486 281.545 328.364 cv
307.999 354.818 li
313.878 360.697 313.878 366.576 307.999 372.455 cv
281.545 398.908 li
275.667 404.787 269.788 404.787 263.909 398.908 cv
237.455 372.455 li
cp
f
237.455 463.363 mo
231.577 457.484 231.577 451.606 237.455 445.728 cv
263.909 419.273 li
269.788 413.395 275.667 413.395 281.545 419.273 cv
307.999 445.728 li
313.878 451.606 313.878 457.484 307.999 463.363 cv
281.545 489.817 li
275.667 495.696 269.788 495.696 263.909 489.817 cv
237.455 463.363 li
cp
f
237.455 554.272 mo
231.577 548.394 231.577 542.516 237.455 536.637 cv
263.909 510.183 li
269.788 504.304 275.667 504.304 281.545 510.183 cv
307.999 536.637 li
313.878 542.516 313.878 548.394 307.999 554.272 cv
281.545 580.727 li
275.667 586.605 269.788 586.605 263.909 580.727 cv
237.455 554.272 li
cp
f
237.455 645.182 mo
231.577 639.303 231.577 633.424 237.455 627.546 cv
263.909 601.092 li
269.788 595.213 275.667 595.213 281.545 601.092 cv
307.999 627.546 li
313.878 633.424 313.878 639.303 307.999 645.182 cv
281.545 671.636 li
275.667 677.515 269.788 677.515 263.909 671.636 cv
237.455 645.182 li
cp
f
237.455 736.091 mo
231.577 730.212 231.577 724.333 237.455 718.455 cv
263.909 692.001 li
269.788 686.122 275.667 686.122 281.545 692.001 cv
307.999 718.455 li
313.878 724.333 313.878 730.212 307.999 736.091 cv
281.545 762.545 li
275.667 768.424 269.788 768.424 263.909 762.545 cv
237.455 736.091 li
cp
f
237.455 827 mo
231.577 821.121 231.577 815.242 237.455 809.364 cv
263.909 782.91 li
269.788 777.031 275.667 777.031 281.545 782.91 cv
307.999 809.364 li
313.878 815.242 313.878 821.121 307.999 827 cv
281.545 853.454 li
275.667 859.332 269.788 859.332 263.909 853.454 cv
237.455 827 li
cp
f
237.455 917.909 mo
231.577 912.03 231.577 906.151 237.455 900.272 cv
263.909 873.819 li
269.788 867.94 275.667 867.94 281.545 873.819 cv
307.999 900.272 li
313.878 906.151 313.878 912.03 307.999 917.909 cv
281.545 944.363 li
275.667 950.241 269.788 950.241 263.909 944.363 cv
237.455 917.909 li
cp
f
237.455 1008.82 mo
231.577 1002.94 231.577 997.061 237.455 991.182 cv
263.909 964.728 li
269.788 958.85 275.667 958.85 281.545 964.728 cv
307.999 991.182 li
313.878 997.061 313.878 1002.94 307.999 1008.82 cv
281.545 1035.27 li
275.667 1041.15 269.788 1041.15 263.909 1035.27 cv
237.455 1008.82 li
cp
f
328.364 8.81787 mo
322.485 2.93945 322.485 -2.93945 328.364 -8.81787 cv
354.818 -35.272 li
360.697 -41.1509 366.576 -41.1509 372.454 -35.272 cv
398.908 -8.81787 li
404.787 -2.93945 404.787 2.93945 398.908 8.81787 cv
372.454 35.272 li
366.576 41.1509 360.697 41.1509 354.818 35.272 cv
328.364 8.81787 li
cp
f
328.364 99.7271 mo
322.485 93.8486 322.485 87.9697 328.364 82.0913 cv
354.818 55.6372 li
360.697 49.7583 366.576 49.7583 372.454 55.6372 cv
398.908 82.0913 li
404.787 87.9697 404.787 93.8486 398.908 99.7271 cv
372.454 126.181 li
366.576 132.06 360.697 132.06 354.818 126.181 cv
328.364 99.7271 li
cp
f
328.364 190.636 mo
322.485 184.758 322.485 178.879 328.364 173 cv
354.818 146.546 li
360.697 140.667 366.576 140.667 372.454 146.546 cv
398.908 173 li
404.787 178.879 404.787 184.758 398.908 190.636 cv
372.454 217.09 li
366.576 222.969 360.697 222.969 354.818 217.09 cv
328.364 190.636 li
cp
f
328.364 281.545 mo
322.485 275.667 322.485 269.788 328.364 263.909 cv
354.818 237.455 li
360.697 231.577 366.576 231.577 372.454 237.455 cv
398.908 263.909 li
404.787 269.788 404.787 275.667 398.908 281.545 cv
372.454 308 li
366.576 313.878 360.697 313.878 354.818 308 cv
328.364 281.545 li
cp
f
328.364 372.455 mo
322.485 366.576 322.485 360.697 328.364 354.818 cv
354.818 328.364 li
360.697 322.486 366.576 322.486 372.454 328.364 cv
398.908 354.818 li
404.787 360.697 404.787 366.576 398.908 372.455 cv
372.454 398.908 li
366.576 404.787 360.697 404.787 354.818 398.908 cv
328.364 372.455 li
cp
f
328.364 463.363 mo
322.485 457.484 322.485 451.606 328.364 445.728 cv
354.818 419.273 li
360.697 413.395 366.576 413.395 372.454 419.273 cv
398.908 445.728 li
404.787 451.606 404.787 457.484 398.908 463.363 cv
372.454 489.817 li
366.576 495.696 360.697 495.696 354.818 489.817 cv
328.364 463.363 li
cp
f
328.364 554.272 mo
322.485 548.394 322.485 542.516 328.364 536.637 cv
354.818 510.183 li
360.697 504.304 366.576 504.304 372.454 510.183 cv
398.908 536.637 li
404.787 542.516 404.787 548.394 398.908 554.272 cv
372.454 580.727 li
366.576 586.605 360.697 586.605 354.818 580.727 cv
328.364 554.272 li
cp
f
328.364 645.182 mo
322.485 639.303 322.485 633.424 328.364 627.546 cv
354.818 601.092 li
360.697 595.213 366.576 595.213 372.454 601.092 cv
398.908 627.546 li
404.787 633.424 404.787 639.303 398.908 645.182 cv
372.454 671.636 li
366.576 677.515 360.697 677.515 354.818 671.636 cv
328.364 645.182 li
cp
f
328.364 736.091 mo
322.485 730.212 322.485 724.333 328.364 718.455 cv
354.818 692.001 li
360.697 686.122 366.576 686.122 372.454 692.001 cv
398.908 718.455 li
404.787 724.333 404.787 730.212 398.908 736.091 cv
372.454 762.545 li
366.576 768.424 360.697 768.424 354.818 762.545 cv
328.364 736.091 li
cp
f
328.364 827 mo
322.485 821.121 322.485 815.242 328.364 809.364 cv
354.818 782.91 li
360.697 777.031 366.576 777.031 372.454 782.91 cv
398.908 809.364 li
404.787 815.242 404.787 821.121 398.908 827 cv
372.454 853.454 li
366.576 859.332 360.697 859.332 354.818 853.454 cv
328.364 827 li
cp
f
328.364 917.909 mo
322.485 912.03 322.485 906.151 328.364 900.272 cv
354.818 873.819 li
360.697 867.94 366.576 867.94 372.454 873.819 cv
398.908 900.272 li
404.787 906.151 404.787 912.03 398.908 917.909 cv
372.454 944.363 li
366.576 950.241 360.697 950.241 354.818 944.363 cv
328.364 917.909 li
cp
f
328.364 1008.82 mo
322.485 1002.94 322.485 997.061 328.364 991.182 cv
354.818 964.728 li
360.697 958.85 366.576 958.85 372.454 964.728 cv
398.908 991.182 li
404.787 997.061 404.787 1002.94 398.908 1008.82 cv
372.454 1035.27 li
366.576 1041.15 360.697 1041.15 354.818 1035.27 cv
328.364 1008.82 li
cp
f
419.273 8.81787 mo
413.395 2.93945 413.395 -2.93945 419.273 -8.81787 cv
445.728 -35.272 li
451.606 -41.1509 457.484 -41.1509 463.363 -35.272 cv
489.817 -8.81787 li
495.696 -2.93945 495.696 2.93945 489.817 8.81787 cv
463.363 35.272 li
457.484 41.1509 451.606 41.1509 445.728 35.272 cv
419.273 8.81787 li
cp
f
419.273 99.7271 mo
413.395 93.8486 413.395 87.9697 419.273 82.0913 cv
445.728 55.6372 li
451.606 49.7583 457.484 49.7583 463.363 55.6372 cv
489.817 82.0913 li
495.696 87.9697 495.696 93.8486 489.817 99.7271 cv
463.363 126.181 li
457.484 132.06 451.606 132.06 445.728 126.181 cv
419.273 99.7271 li
cp
f
419.273 190.636 mo
413.395 184.758 413.395 178.879 419.273 173 cv
445.728 146.546 li
451.606 140.667 457.484 140.667 463.363 146.546 cv
489.817 173 li
495.696 178.879 495.696 184.758 489.817 190.636 cv
463.363 217.09 li
457.484 222.969 451.606 222.969 445.728 217.09 cv
419.273 190.636 li
cp
f
419.273 281.545 mo
413.395 275.667 413.395 269.788 419.273 263.909 cv
445.728 237.455 li
451.606 231.577 457.484 231.577 463.363 237.455 cv
489.817 263.909 li
495.696 269.788 495.696 275.667 489.817 281.545 cv
463.363 308 li
457.484 313.878 451.606 313.878 445.728 308 cv
419.273 281.545 li
cp
f
419.273 372.455 mo
413.395 366.576 413.395 360.697 419.273 354.818 cv
445.728 328.364 li
451.606 322.486 457.484 322.486 463.363 328.364 cv
489.817 354.818 li
495.696 360.697 495.696 366.576 489.817 372.455 cv
463.363 398.908 li
457.484 404.787 451.606 404.787 445.728 398.908 cv
419.273 372.455 li
cp
f
419.273 463.363 mo
413.395 457.484 413.395 451.606 419.273 445.728 cv
445.728 419.273 li
451.606 413.395 457.484 413.395 463.363 419.273 cv
489.817 445.728 li
495.696 451.606 495.696 457.484 489.817 463.363 cv
463.363 489.817 li
457.484 495.696 451.606 495.696 445.728 489.817 cv
419.273 463.363 li
cp
f
419.273 554.272 mo
413.395 548.394 413.395 542.516 419.273 536.637 cv
445.728 510.183 li
451.606 504.304 457.484 504.304 463.363 510.183 cv
489.817 536.637 li
495.696 542.516 495.696 548.394 489.817 554.272 cv
463.363 580.727 li
457.484 586.605 451.606 586.605 445.728 580.727 cv
419.273 554.272 li
cp
f
419.273 645.182 mo
413.395 639.303 413.395 633.424 419.273 627.546 cv
445.728 601.092 li
451.606 595.213 457.484 595.213 463.363 601.092 cv
489.817 627.546 li
495.696 633.424 495.696 639.303 489.817 645.182 cv
463.363 671.636 li
457.484 677.515 451.606 677.515 445.728 671.636 cv
419.273 645.182 li
cp
f
419.273 736.091 mo
413.395 730.212 413.395 724.333 419.273 718.455 cv
445.728 692.001 li
451.606 686.122 457.484 686.122 463.363 692.001 cv
489.817 718.455 li
495.696 724.333 495.696 730.212 489.817 736.091 cv
463.363 762.545 li
457.484 768.424 451.606 768.424 445.728 762.545 cv
419.273 736.091 li
cp
f
419.273 827 mo
413.395 821.121 413.395 815.242 419.273 809.364 cv
445.728 782.91 li
451.606 777.031 457.484 777.031 463.363 782.91 cv
489.817 809.364 li
495.696 815.242 495.696 821.121 489.817 827 cv
463.363 853.454 li
457.484 859.332 451.606 859.332 445.728 853.454 cv
419.273 827 li
cp
f
419.273 917.909 mo
413.395 912.03 413.395 906.151 419.273 900.272 cv
445.728 873.819 li
451.606 867.94 457.484 867.94 463.363 873.819 cv
489.817 900.272 li
495.696 906.151 495.696 912.03 489.817 917.909 cv
463.363 944.363 li
457.484 950.241 451.606 950.241 445.728 944.363 cv
419.273 917.909 li
cp
f
419.273 1008.82 mo
413.395 1002.94 413.395 997.061 419.273 991.182 cv
445.728 964.728 li
451.606 958.85 457.484 958.85 463.363 964.728 cv
489.817 991.182 li
495.696 997.061 495.696 1002.94 489.817 1008.82 cv
463.363 1035.27 li
457.484 1041.15 451.606 1041.15 445.728 1035.27 cv
419.273 1008.82 li
cp
f
510.183 8.81787 mo
504.304 2.93945 504.304 -2.93945 510.183 -8.81787 cv
536.637 -35.272 li
542.516 -41.1509 548.394 -41.1509 554.272 -35.272 cv
580.727 -8.81787 li
586.605 -2.93945 586.605 2.93945 580.727 8.81787 cv
554.272 35.272 li
548.394 41.1509 542.516 41.1509 536.637 35.272 cv
510.183 8.81787 li
cp
f
510.183 99.7271 mo
504.304 93.8486 504.304 87.9697 510.183 82.0913 cv
536.637 55.6372 li
542.516 49.7583 548.394 49.7583 554.272 55.6372 cv
580.727 82.0913 li
586.605 87.9697 586.605 93.8486 580.727 99.7271 cv
554.272 126.181 li
548.394 132.06 542.516 132.06 536.637 126.181 cv
510.183 99.7271 li
cp
f
510.183 190.636 mo
504.304 184.758 504.304 178.879 510.183 173 cv
536.637 146.546 li
542.516 140.667 548.394 140.667 554.272 146.546 cv
580.727 173 li
586.605 178.879 586.605 184.758 580.727 190.636 cv
554.272 217.09 li
548.394 222.969 542.516 222.969 536.637 217.09 cv
510.183 190.636 li
cp
f
510.183 281.545 mo
504.304 275.667 504.304 269.788 510.183 263.909 cv
536.637 237.455 li
542.516 231.577 548.394 231.577 554.272 237.455 cv
580.727 263.909 li
586.605 269.788 586.605 275.667 580.727 281.545 cv
554.272 308 li
548.394 313.878 542.516 313.878 536.637 308 cv
510.183 281.545 li
cp
f
510.183 372.455 mo
504.304 366.576 504.304 360.697 510.183 354.818 cv
536.637 328.364 li
542.516 322.486 548.394 322.486 554.272 328.364 cv
580.727 354.818 li
586.605 360.697 586.605 366.576 580.727 372.455 cv
554.272 398.908 li
548.394 404.787 542.516 404.787 536.637 398.908 cv
510.183 372.455 li
cp
f
510.183 463.363 mo
504.304 457.484 504.304 451.606 510.183 445.728 cv
536.637 419.273 li
542.516 413.395 548.394 413.395 554.272 419.273 cv
580.727 445.728 li
586.605 451.606 586.605 457.484 580.727 463.363 cv
554.272 489.817 li
548.394 495.696 542.516 495.696 536.637 489.817 cv
510.183 463.363 li
cp
f
510.183 554.272 mo
504.304 548.394 504.304 542.516 510.183 536.637 cv
536.637 510.183 li
542.516 504.304 548.394 504.304 554.272 510.183 cv
580.727 536.637 li
586.605 542.516 586.605 548.394 580.727 554.272 cv
554.272 580.727 li
548.394 586.605 542.516 586.605 536.637 580.727 cv
510.183 554.272 li
cp
f
510.183 645.182 mo
504.304 639.303 504.304 633.424 510.183 627.546 cv
536.637 601.092 li
542.516 595.213 548.394 595.213 554.272 601.092 cv
580.727 627.546 li
586.605 633.424 586.605 639.303 580.727 645.182 cv
554.272 671.636 li
548.394 677.515 542.516 677.515 536.637 671.636 cv
510.183 645.182 li
cp
f
510.183 736.091 mo
504.304 730.212 504.304 724.333 510.183 718.455 cv
536.637 692.001 li
542.516 686.122 548.394 686.122 554.272 692.001 cv
580.727 718.455 li
586.605 724.333 586.605 730.212 580.727 736.091 cv
554.272 762.545 li
548.394 768.424 542.516 768.424 536.637 762.545 cv
510.183 736.091 li
cp
f
510.183 827 mo
504.304 821.121 504.304 815.242 510.183 809.364 cv
536.637 782.91 li
542.516 777.031 548.394 777.031 554.272 782.91 cv
580.727 809.364 li
586.605 815.242 586.605 821.121 580.727 827 cv
554.272 853.454 li
548.394 859.332 542.516 859.332 536.637 853.454 cv
510.183 827 li
cp
f
510.183 917.909 mo
504.304 912.03 504.304 906.151 510.183 900.272 cv
536.637 873.819 li
542.516 867.94 548.394 867.94 554.272 873.819 cv
580.727 900.272 li
586.605 906.151 586.605 912.03 580.727 917.909 cv
554.272 944.363 li
548.394 950.241 542.516 950.241 536.637 944.363 cv
510.183 917.909 li
cp
f
510.183 1008.82 mo
504.304 1002.94 504.304 997.061 510.183 991.182 cv
536.637 964.728 li
542.516 958.85 548.394 958.85 554.272 964.728 cv
580.727 991.182 li
586.605 997.061 586.605 1002.94 580.727 1008.82 cv
554.272 1035.27 li
548.394 1041.15 542.516 1041.15 536.637 1035.27 cv
510.183 1008.82 li
cp
f
601.092 8.81787 mo
595.213 2.93945 595.213 -2.93945 601.092 -8.81787 cv
627.546 -35.272 li
633.424 -41.1509 639.303 -41.1509 645.182 -35.272 cv
671.636 -8.81787 li
677.515 -2.93945 677.515 2.93945 671.636 8.81787 cv
645.182 35.272 li
639.303 41.1509 633.424 41.1509 627.546 35.272 cv
601.092 8.81787 li
cp
f
601.092 99.7271 mo
595.213 93.8486 595.213 87.9697 601.092 82.0913 cv
627.546 55.6372 li
633.424 49.7583 639.303 49.7583 645.182 55.6372 cv
671.636 82.0913 li
677.515 87.9697 677.515 93.8486 671.636 99.7271 cv
645.182 126.181 li
639.303 132.06 633.424 132.06 627.546 126.181 cv
601.092 99.7271 li
cp
f
601.092 190.636 mo
595.213 184.758 595.213 178.879 601.092 173 cv
627.546 146.546 li
633.424 140.667 639.303 140.667 645.182 146.546 cv
671.636 173 li
677.515 178.879 677.515 184.758 671.636 190.636 cv
645.182 217.09 li
639.303 222.969 633.424 222.969 627.546 217.09 cv
601.092 190.636 li
cp
f
601.092 281.545 mo
595.213 275.667 595.213 269.788 601.092 263.909 cv
627.546 237.455 li
633.424 231.577 639.303 231.577 645.182 237.455 cv
671.636 263.909 li
677.515 269.788 677.515 275.667 671.636 281.545 cv
645.182 308 li
639.303 313.878 633.424 313.878 627.546 308 cv
601.092 281.545 li
cp
f
601.092 372.455 mo
595.213 366.576 595.213 360.697 601.092 354.818 cv
627.546 328.364 li
633.424 322.486 639.303 322.486 645.182 328.364 cv
671.636 354.818 li
677.515 360.697 677.515 366.576 671.636 372.455 cv
645.182 398.908 li
639.303 404.787 633.424 404.787 627.546 398.908 cv
601.092 372.455 li
cp
f
601.092 463.363 mo
595.213 457.484 595.213 451.606 601.092 445.728 cv
627.546 419.273 li
633.424 413.395 639.303 413.395 645.182 419.273 cv
671.636 445.728 li
677.515 451.606 677.515 457.484 671.636 463.363 cv
645.182 489.817 li
639.303 495.696 633.424 495.696 627.546 489.817 cv
601.092 463.363 li
cp
f
601.092 554.272 mo
595.213 548.394 595.213 542.516 601.092 536.637 cv
627.546 510.183 li
633.424 504.304 639.303 504.304 645.182 510.183 cv
671.636 536.637 li
677.515 542.516 677.515 548.394 671.636 554.272 cv
645.182 580.727 li
639.303 586.605 633.424 586.605 627.546 580.727 cv
601.092 554.272 li
cp
f
601.092 645.182 mo
595.213 639.303 595.213 633.424 601.092 627.546 cv
627.546 601.092 li
633.424 595.213 639.303 595.213 645.182 601.092 cv
671.636 627.546 li
677.515 633.424 677.515 639.303 671.636 645.182 cv
645.182 671.636 li
639.303 677.515 633.424 677.515 627.546 671.636 cv
601.092 645.182 li
cp
f
601.092 736.091 mo
595.213 730.212 595.213 724.333 601.092 718.455 cv
627.546 692.001 li
633.424 686.122 639.303 686.122 645.182 692.001 cv
671.636 718.455 li
677.515 724.333 677.515 730.212 671.636 736.091 cv
645.182 762.545 li
639.303 768.424 633.424 768.424 627.546 762.545 cv
601.092 736.091 li
cp
f
601.092 827 mo
595.213 821.121 595.213 815.242 601.092 809.364 cv
627.546 782.91 li
633.424 777.031 639.303 777.031 645.182 782.91 cv
671.636 809.364 li
677.515 815.242 677.515 821.121 671.636 827 cv
645.182 853.454 li
639.303 859.332 633.424 859.332 627.546 853.454 cv
601.092 827 li
cp
f
601.092 917.909 mo
595.213 912.03 595.213 906.151 601.092 900.272 cv
627.546 873.819 li
633.424 867.94 639.303 867.94 645.182 873.819 cv
671.636 900.272 li
677.515 906.151 677.515 912.03 671.636 917.909 cv
645.182 944.363 li
639.303 950.241 633.424 950.241 627.546 944.363 cv
601.092 917.909 li
cp
f
601.092 1008.82 mo
595.213 1002.94 595.213 997.061 601.092 991.182 cv
627.546 964.728 li
633.424 958.85 639.303 958.85 645.182 964.728 cv
671.636 991.182 li
677.515 997.061 677.515 1002.94 671.636 1008.82 cv
645.182 1035.27 li
639.303 1041.15 633.424 1041.15 627.546 1035.27 cv
601.092 1008.82 li
cp
f
692.001 8.81787 mo
686.122 2.93945 686.122 -2.93945 692.001 -8.81787 cv
718.455 -35.272 li
724.333 -41.1509 730.212 -41.1509 736.091 -35.272 cv
762.545 -8.81787 li
768.424 -2.93945 768.424 2.93945 762.545 8.81787 cv
736.091 35.272 li
730.212 41.1509 724.333 41.1509 718.455 35.272 cv
692.001 8.81787 li
cp
f
692.001 99.7271 mo
686.122 93.8486 686.122 87.9697 692.001 82.0913 cv
718.455 55.6372 li
724.333 49.7583 730.212 49.7583 736.091 55.6372 cv
762.545 82.0913 li
768.424 87.9697 768.424 93.8486 762.545 99.7271 cv
736.091 126.181 li
730.212 132.06 724.333 132.06 718.455 126.181 cv
692.001 99.7271 li
cp
f
692.001 190.636 mo
686.122 184.758 686.122 178.879 692.001 173 cv
718.455 146.546 li
724.333 140.667 730.212 140.667 736.091 146.546 cv
762.545 173 li
768.424 178.879 768.424 184.758 762.545 190.636 cv
736.091 217.09 li
730.212 222.969 724.333 222.969 718.455 217.09 cv
692.001 190.636 li
cp
f
692.001 281.545 mo
686.122 275.667 686.122 269.788 692.001 263.909 cv
718.455 237.455 li
724.333 231.577 730.212 231.577 736.091 237.455 cv
762.545 263.909 li
768.424 269.788 768.424 275.667 762.545 281.545 cv
736.091 308 li
730.212 313.878 724.333 313.878 718.455 308 cv
692.001 281.545 li
cp
f
692.001 372.455 mo
686.122 366.576 686.122 360.697 692.001 354.818 cv
718.455 328.364 li
724.333 322.486 730.212 322.486 736.091 328.364 cv
762.545 354.818 li
768.424 360.697 768.424 366.576 762.545 372.455 cv
736.091 398.908 li
730.212 404.787 724.333 404.787 718.455 398.908 cv
692.001 372.455 li
cp
f
692.001 463.363 mo
686.122 457.484 686.122 451.606 692.001 445.728 cv
718.455 419.273 li
724.333 413.395 730.212 413.395 736.091 419.273 cv
762.545 445.728 li
768.424 451.606 768.424 457.484 762.545 463.363 cv
736.091 489.817 li
730.212 495.696 724.333 495.696 718.455 489.817 cv
692.001 463.363 li
cp
f
692.001 554.272 mo
686.122 548.394 686.122 542.516 692.001 536.637 cv
718.455 510.183 li
724.333 504.304 730.212 504.304 736.091 510.183 cv
762.545 536.637 li
768.424 542.516 768.424 548.394 762.545 554.272 cv
736.091 580.727 li
730.212 586.605 724.333 586.605 718.455 580.727 cv
692.001 554.272 li
cp
f
692.001 645.182 mo
686.122 639.303 686.122 633.424 692.001 627.546 cv
718.455 601.092 li
724.333 595.213 730.212 595.213 736.091 601.092 cv
762.545 627.546 li
768.424 633.424 768.424 639.303 762.545 645.182 cv
736.091 671.636 li
730.212 677.515 724.333 677.515 718.455 671.636 cv
692.001 645.182 li
cp
f
692.001 736.091 mo
686.122 730.212 686.122 724.333 692.001 718.455 cv
718.455 692.001 li
724.333 686.122 730.212 686.122 736.091 692.001 cv
762.545 718.455 li
768.424 724.333 768.424 730.212 762.545 736.091 cv
736.091 762.545 li
730.212 768.424 724.333 768.424 718.455 762.545 cv
692.001 736.091 li
cp
f
692.001 827 mo
686.122 821.121 686.122 815.242 692.001 809.364 cv
718.455 782.91 li
724.333 777.031 730.212 777.031 736.091 782.91 cv
762.545 809.364 li
768.424 815.242 768.424 821.121 762.545 827 cv
736.091 853.454 li
730.212 859.332 724.333 859.332 718.455 853.454 cv
692.001 827 li
cp
f
692.001 917.909 mo
686.122 912.03 686.122 906.151 692.001 900.272 cv
718.455 873.819 li
724.333 867.94 730.212 867.94 736.091 873.819 cv
762.545 900.272 li
768.424 906.151 768.424 912.03 762.545 917.909 cv
736.091 944.363 li
730.212 950.241 724.333 950.241 718.455 944.363 cv
692.001 917.909 li
cp
f
692.001 1008.82 mo
686.122 1002.94 686.122 997.061 692.001 991.182 cv
718.455 964.728 li
724.333 958.85 730.212 958.85 736.091 964.728 cv
762.545 991.182 li
768.424 997.061 768.424 1002.94 762.545 1008.82 cv
736.091 1035.27 li
730.212 1041.15 724.333 1041.15 718.455 1035.27 cv
692.001 1008.82 li
cp
f
782.91 8.81787 mo
777.031 2.93945 777.031 -2.93945 782.91 -8.81787 cv
809.364 -35.272 li
815.242 -41.1509 821.121 -41.1509 827 -35.272 cv
853.454 -8.81787 li
859.332 -2.93945 859.332 2.93945 853.454 8.81787 cv
827 35.272 li
821.121 41.1509 815.242 41.1509 809.364 35.272 cv
782.91 8.81787 li
cp
f
782.91 99.7271 mo
777.031 93.8486 777.031 87.9697 782.91 82.0913 cv
809.364 55.6372 li
815.242 49.7583 821.121 49.7583 827 55.6372 cv
853.454 82.0913 li
859.332 87.9697 859.332 93.8486 853.454 99.7271 cv
827 126.181 li
821.121 132.06 815.242 132.06 809.364 126.181 cv
782.91 99.7271 li
cp
f
782.91 190.636 mo
777.031 184.758 777.031 178.879 782.91 173 cv
809.364 146.546 li
815.242 140.667 821.121 140.667 827 146.546 cv
853.454 173 li
859.332 178.879 859.332 184.758 853.454 190.636 cv
827 217.09 li
821.121 222.969 815.242 222.969 809.364 217.09 cv
782.91 190.636 li
cp
f
782.91 281.545 mo
777.031 275.667 777.031 269.788 782.91 263.909 cv
809.364 237.455 li
815.242 231.577 821.121 231.577 827 237.455 cv
853.454 263.909 li
859.332 269.788 859.332 275.667 853.454 281.545 cv
827 308 li
821.121 313.878 815.242 313.878 809.364 308 cv
782.91 281.545 li
cp
f
782.91 372.455 mo
777.031 366.576 777.031 360.697 782.91 354.818 cv
809.364 328.364 li
815.242 322.486 821.121 322.486 827 328.364 cv
853.454 354.818 li
859.332 360.697 859.332 366.576 853.454 372.455 cv
827 398.908 li
821.121 404.787 815.242 404.787 809.364 398.908 cv
782.91 372.455 li
cp
f
782.91 463.363 mo
777.031 457.484 777.031 451.606 782.91 445.728 cv
809.364 419.273 li
815.242 413.395 821.121 413.395 827 419.273 cv
853.454 445.728 li
859.332 451.606 859.332 457.484 853.454 463.363 cv
827 489.817 li
821.121 495.696 815.242 495.696 809.364 489.817 cv
782.91 463.363 li
cp
f
782.91 554.272 mo
777.031 548.394 777.031 542.516 782.91 536.637 cv
809.364 510.183 li
815.242 504.304 821.121 504.304 827 510.183 cv
853.454 536.637 li
859.332 542.516 859.332 548.394 853.454 554.272 cv
827 580.727 li
821.121 586.605 815.242 586.605 809.364 580.727 cv
782.91 554.272 li
cp
f
782.91 645.182 mo
777.031 639.303 777.031 633.424 782.91 627.546 cv
809.364 601.092 li
815.242 595.213 821.121 595.213 827 601.092 cv
853.454 627.546 li
859.332 633.424 859.332 639.303 853.454 645.182 cv
827 671.636 li
821.121 677.515 815.242 677.515 809.364 671.636 cv
782.91 645.182 li
cp
f
782.91 736.091 mo
777.031 730.212 777.031 724.333 782.91 718.455 cv
809.364 692.001 li
815.242 686.122 821.121 686.122 827 692.001 cv
853.454 718.455 li
859.332 724.333 859.332 730.212 853.454 736.091 cv
827 762.545 li
821.121 768.424 815.242 768.424 809.364 762.545 cv
782.91 736.091 li
cp
f
782.91 827 mo
777.031 821.121 777.031 815.242 782.91 809.364 cv
809.364 782.91 li
815.242 777.031 821.121 777.031 827 782.91 cv
853.454 809.364 li
859.332 815.242 859.332 821.121 853.454 827 cv
827 853.454 li
821.121 859.332 815.242 859.332 809.364 853.454 cv
782.91 827 li
cp
f
782.91 917.909 mo
777.031 912.03 777.031 906.151 782.91 900.272 cv
809.364 873.819 li
815.242 867.94 821.121 867.94 827 873.819 cv
853.454 900.272 li
859.332 906.151 859.332 912.03 853.454 917.909 cv
827 944.363 li
821.121 950.241 815.242 950.241 809.364 944.363 cv
782.91 917.909 li
cp
f
782.91 1008.82 mo
777.031 1002.94 777.031 997.061 782.91 991.182 cv
809.364 964.728 li
815.242 958.85 821.121 958.85 827 964.728 cv
853.454 991.182 li
859.332 997.061 859.332 1002.94 853.454 1008.82 cv
827 1035.27 li
821.121 1041.15 815.242 1041.15 809.364 1035.27 cv
782.91 1008.82 li
cp
f
873.819 8.81787 mo
867.94 2.93945 867.94 -2.93945 873.819 -8.81787 cv
900.272 -35.272 li
906.151 -41.1509 912.03 -41.1509 917.909 -35.272 cv
944.363 -8.81787 li
950.241 -2.93945 950.241 2.93945 944.363 8.81787 cv
917.909 35.272 li
912.03 41.1509 906.151 41.1509 900.272 35.272 cv
873.819 8.81787 li
cp
f
873.819 99.7271 mo
867.94 93.8486 867.94 87.9697 873.819 82.0913 cv
900.272 55.6372 li
906.151 49.7583 912.03 49.7583 917.909 55.6372 cv
944.363 82.0913 li
950.241 87.9697 950.241 93.8486 944.363 99.7271 cv
917.909 126.181 li
912.03 132.06 906.151 132.06 900.272 126.181 cv
873.819 99.7271 li
cp
f
873.819 190.636 mo
867.94 184.758 867.94 178.879 873.819 173 cv
900.272 146.546 li
906.151 140.667 912.03 140.667 917.909 146.546 cv
944.363 173 li
950.241 178.879 950.241 184.758 944.363 190.636 cv
917.909 217.09 li
912.03 222.969 906.151 222.969 900.272 217.09 cv
873.819 190.636 li
cp
f
873.819 281.545 mo
867.94 275.667 867.94 269.788 873.819 263.909 cv
900.272 237.455 li
906.151 231.577 912.03 231.577 917.909 237.455 cv
944.363 263.909 li
950.241 269.788 950.241 275.667 944.363 281.545 cv
917.909 308 li
912.03 313.878 906.151 313.878 900.272 308 cv
873.819 281.545 li
cp
f
873.819 372.455 mo
867.94 366.576 867.94 360.697 873.819 354.818 cv
900.272 328.364 li
906.151 322.486 912.03 322.486 917.909 328.364 cv
944.363 354.818 li
950.241 360.697 950.241 366.576 944.363 372.455 cv
917.909 398.908 li
912.03 404.787 906.151 404.787 900.272 398.908 cv
873.819 372.455 li
cp
f
873.819 463.363 mo
867.94 457.484 867.94 451.606 873.819 445.728 cv
900.272 419.273 li
906.151 413.395 912.03 413.395 917.909 419.273 cv
944.363 445.728 li
950.241 451.606 950.241 457.484 944.363 463.363 cv
917.909 489.817 li
912.03 495.696 906.151 495.696 900.272 489.817 cv
873.819 463.363 li
cp
f
873.819 554.272 mo
867.94 548.394 867.94 542.516 873.819 536.637 cv
900.272 510.183 li
906.151 504.304 912.03 504.304 917.909 510.183 cv
944.363 536.637 li
950.241 542.516 950.241 548.394 944.363 554.272 cv
917.909 580.727 li
912.03 586.605 906.151 586.605 900.272 580.727 cv
873.819 554.272 li
cp
f
873.819 645.182 mo
867.94 639.303 867.94 633.424 873.819 627.546 cv
900.272 601.092 li
906.151 595.213 912.03 595.213 917.909 601.092 cv
944.363 627.546 li
950.241 633.424 950.241 639.303 944.363 645.182 cv
917.909 671.636 li
912.03 677.515 906.151 677.515 900.272 671.636 cv
873.819 645.182 li
cp
f
873.819 736.091 mo
867.94 730.212 867.94 724.333 873.819 718.455 cv
900.272 692.001 li
906.151 686.122 912.03 686.122 917.909 692.001 cv
944.363 718.455 li
950.241 724.333 950.241 730.212 944.363 736.091 cv
917.909 762.545 li
912.03 768.424 906.151 768.424 900.272 762.545 cv
873.819 736.091 li
cp
f
873.819 827 mo
867.94 821.121 867.94 815.242 873.819 809.364 cv
900.272 782.91 li
906.151 777.031 912.03 777.031 917.909 782.91 cv
944.363 809.364 li
950.241 815.242 950.241 821.121 944.363 827 cv
917.909 853.454 li
912.03 859.332 906.151 859.332 900.272 853.454 cv
873.819 827 li
cp
f
873.819 917.909 mo
867.94 912.03 867.94 906.151 873.819 900.272 cv
900.272 873.819 li
906.151 867.94 912.03 867.94 917.909 873.819 cv
944.363 900.272 li
950.241 906.151 950.241 912.03 944.363 917.909 cv
917.909 944.363 li
912.03 950.241 906.151 950.241 900.272 944.363 cv
873.819 917.909 li
cp
f
873.819 1008.82 mo
867.94 1002.94 867.94 997.061 873.819 991.182 cv
900.272 964.728 li
906.151 958.85 912.03 958.85 917.909 964.728 cv
944.363 991.182 li
950.241 997.061 950.241 1002.94 944.363 1008.82 cv
917.909 1035.27 li
912.03 1041.15 906.151 1041.15 900.272 1035.27 cv
873.819 1008.82 li
cp
f
964.729 8.81787 mo
958.85 2.93945 958.85 -2.93945 964.729 -8.81787 cv
991.182 -35.272 li
997.061 -41.1509 1002.94 -41.1509 1008.82 -35.272 cv
1035.27 -8.81787 li
1041.15 -2.93945 1041.15 2.93945 1035.27 8.81787 cv
1008.82 35.272 li
1002.94 41.1509 997.061 41.1509 991.182 35.272 cv
964.729 8.81787 li
cp
f
964.729 99.7271 mo
958.85 93.8486 958.85 87.9697 964.729 82.0913 cv
991.182 55.6372 li
997.061 49.7583 1002.94 49.7583 1008.82 55.6372 cv
1035.27 82.0913 li
1041.15 87.9697 1041.15 93.8486 1035.27 99.7271 cv
1008.82 126.181 li
1002.94 132.06 997.061 132.06 991.182 126.181 cv
964.729 99.7271 li
cp
f
964.729 190.636 mo
958.85 184.758 958.85 178.879 964.729 173 cv
991.182 146.546 li
997.061 140.667 1002.94 140.667 1008.82 146.546 cv
1035.27 173 li
1041.15 178.879 1041.15 184.758 1035.27 190.636 cv
1008.82 217.09 li
1002.94 222.969 997.061 222.969 991.182 217.09 cv
964.729 190.636 li
cp
f
964.729 281.545 mo
958.85 275.667 958.85 269.788 964.729 263.909 cv
991.182 237.455 li
997.061 231.577 1002.94 231.577 1008.82 237.455 cv
1035.27 263.909 li
1041.15 269.788 1041.15 275.667 1035.27 281.545 cv
1008.82 308 li
1002.94 313.878 997.061 313.878 991.182 308 cv
964.729 281.545 li
cp
f
964.729 372.455 mo
958.85 366.576 958.85 360.697 964.729 354.818 cv
991.182 328.364 li
997.061 322.486 1002.94 322.486 1008.82 328.364 cv
1035.27 354.818 li
1041.15 360.697 1041.15 366.576 1035.27 372.455 cv
1008.82 398.908 li
1002.94 404.787 997.061 404.787 991.182 398.908 cv
964.729 372.455 li
cp
f
964.729 463.363 mo
958.85 457.484 958.85 451.606 964.729 445.728 cv
991.182 419.273 li
997.061 413.395 1002.94 413.395 1008.82 419.273 cv
1035.27 445.728 li
1041.15 451.606 1041.15 457.484 1035.27 463.363 cv
1008.82 489.817 li
1002.94 495.696 997.061 495.696 991.182 489.817 cv
964.729 463.363 li
cp
f
964.729 554.272 mo
958.85 548.394 958.85 542.516 964.729 536.637 cv
991.182 510.183 li
997.061 504.304 1002.94 504.304 1008.82 510.183 cv
1035.27 536.637 li
1041.15 542.516 1041.15 548.394 1035.27 554.272 cv
1008.82 580.727 li
1002.94 586.605 997.061 586.605 991.182 580.727 cv
964.729 554.272 li
cp
f
964.729 645.182 mo
958.85 639.303 958.85 633.424 964.729 627.546 cv
991.182 601.092 li
997.061 595.213 1002.94 595.213 1008.82 601.092 cv
1035.27 627.546 li
1041.15 633.424 1041.15 639.303 1035.27 645.182 cv
1008.82 671.636 li
1002.94 677.515 997.061 677.515 991.182 671.636 cv
964.729 645.182 li
cp
f
964.729 736.091 mo
958.85 730.212 958.85 724.333 964.729 718.455 cv
991.182 692.001 li
997.061 686.122 1002.94 686.122 1008.82 692.001 cv
1035.27 718.455 li
1041.15 724.333 1041.15 730.212 1035.27 736.091 cv
1008.82 762.545 li
1002.94 768.424 997.061 768.424 991.182 762.545 cv
964.729 736.091 li
cp
f
964.729 827 mo
958.85 821.121 958.85 815.242 964.729 809.364 cv
991.182 782.91 li
997.061 777.031 1002.94 777.031 1008.82 782.91 cv
1035.27 809.364 li
1041.15 815.242 1041.15 821.121 1035.27 827 cv
1008.82 853.454 li
1002.94 859.332 997.061 859.332 991.182 853.454 cv
964.729 827 li
cp
f
964.729 917.909 mo
958.85 912.03 958.85 906.151 964.729 900.272 cv
991.182 873.819 li
997.061 867.94 1002.94 867.94 1008.82 873.819 cv
1035.27 900.272 li
1041.15 906.151 1041.15 912.03 1035.27 917.909 cv
1008.82 944.363 li
1002.94 950.241 997.061 950.241 991.182 944.363 cv
964.729 917.909 li
cp
f
964.729 1008.82 mo
958.85 1002.94 958.85 997.061 964.729 991.182 cv
991.182 964.728 li
997.061 958.85 1002.94 958.85 1008.82 964.728 cv
1035.27 991.182 li
1041.15 997.061 1041.15 1002.94 1035.27 1008.82 cv
1008.82 1035.27 li
1002.94 1041.15 997.061 1041.15 991.182 1035.27 cv
964.729 1008.82 li
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Zydd) ()
%%Title: (gm_bw_001_bcgr_003.eps)
%%CreationDate: 10/9/2017 12:02 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!R&=^)ie[]TL6fCRLAOF&Z(X)B]#&I>qb`\uJZ`rZCb#RO.ueuF.<If"uCN&g#+V#]'"lf=DXZd*a1,\P,Ua>'uWGa5j]B5MV8
%5OA*)f*;7]c7J)CAb/^#Pc<aoR9I<#k9"p94R9`IN$^J6AV1GMk!-7Yg&>3ZABT/fk2>1WXOA9+)%I-;UXAq22].R@1[BP"qjCOQ
%A+Q%1k#820)uM4menZ@tR[hChnm8BOla-l6Zh?@Wal\1_EA'k35;HAR#PR='?JTsWAjY7Cn^pfOp2)b'oBti]2ef#&s5q&.lPt+=
%j'd;i*V@+kgJ&X5/)dY?46Q##%q]ItRCr@QSG?Zlff<eSoYt=/);WI531eIK>qBNpc>@)+A5u;jKciPArg+/q=$o7P\!4B%?T3oB
%A:H4BMO@ApcC6aegI<@ATT[K_b3%"RQ]R7b?mB_YO`gkO3bRWhp:(bU\"Ym]`HjuP/";og%hEI$*(TmUQ$hHd>HJ]n,AO^8KA-.%
%g\KHAk#nU1fGV81f,0OW]DlB$;*L>i"ol(s]Y!BML@>#qYo0E*&?CQgs(ZN*l'^p]#H_;o30_pni*Wt4:4%6@)&j_/H5Cb[Q]:@m
%Dm(h>2VW_*XNL+:Ofe4MIqS6o.!;MZX(Q1TEc@\/Pt\khaV645$hibrq6M+tfr<e[c'LQu<d8+b[l*LnGPfQ]>'9;uY^<<PX;3S!
%n=QBOClSFt0)t+71jpF+4+/P>?eAS47B4XE?Z"Ou2u8<qK/5Ue,Q$eqd<"29]f.ooJ(7nX^R8A4S@`YAJ\BY;PL/^O*WPrUlgSi#
%]f3V4o>dcH_8Z6ArmBZM5NWl>KDeQbPVqf<_S=B/k(6sbIuirGZgI2Vr&+;i4iYRSK.smas/XTfSC<K1C%i,o]C"SQ/3A@1C\QT$
%9^i;RHaEU9q+KK7;"q,tR<E?Unp0D+*$b^B9Jgb.#5"frRegDM*=Rp7%Pq>d5Ktin(VpD0ZSQD>QpYD6n+A;bF4O`dmJOS;D>!;d
%M)h&KqM-:0*<%uR*as#R._#FAgE6(!UGM7u,PZP]Z*c&'p:'m,RDXs18S2Thkip`S)n8,3DMI1*-S^Tgj(Ssi5:1U;lg8#^HTZ,:
%T6(U@m=3:9dEj2M1TBR\)"hSpqL:hAd>T?Y,9ki$ll'YGEi-?eS*b^5`s4!SN3tld&%eBJ]P%iE;7CHr[@-E?m^T%4CN+H7Dojch
%-gbso[Tg1R9AON3cWh[h'!S`bmDYb?rlnd%a+*hEk.:0BAUj3QIdgQRfi7[ah'7?;cTHI.53l_pbr4<^F19Q57_-a/rJ0it5.5=h
%SbXX;/a)Ip9t!s%=),_4LKpNLYh-p#^/Auc*ud+(DKA#@D1?n@Iembfs"`3obcAsSDn4*NTB;2H[m:sgVNgRbnF4ag1(R'Tp4o;F
%AgjTVf8n4HG0aET4(1))m*B#4jF(Yp![%H_Nni\)l'heHIqr3sgAGRgC")Fu4##&7LR\3sR`O[/5DJ?M];ts-iauhedE>^47EZ-O
%ZTU4(\?kop!`h8RfC"21T(_[B0JF;,F6)]f$_K;.+-$'(a/4DtA#p2:pXY+PF)rl/n^G.9UWLYiF('t(0Tfc3n2TCCa&eb6c+W?f
%<BSLLrVN\J2]F:cP7P;&(ZWe3;B*M^gMIbQDZ3;2cuoXAh;7+pds#"21(TtG,D&/7J&ZumdnMg5GPe/K^Y6TQ6Q/t]p9/Z.!ZTlY
%N%WefDb_Em4'0\Js7NiCWrA[KR:VV/K7hXuiCq-7S,P@#qk&(O^DkB-jCd_Qd>W??GocNhL5ties%QAgmft.goq9Me']&J3Y;;@u
%Ai\<>^C0"mT+mUkRf0U$[nVV8D*JQT6e^HL!N3^4V\38V[I%h%]i5pmcE>YVHkT2p-**VJ%+&-igcdPbm(Z@jrI8+sX[@;V2j48U
%lc#jc/lj_<hK@PcbhRL@:p,>Zb_%eE'UP4LCQD55(rP"iHn_/IY2/E$Q)\<e_t.cs`C_b)0^&tR[`7o4j'k-l]PESP6XKM:3g4nJ
%pVZfcF<GYY2](_p`AhoY55niqD0Ih@1UWX!4%BrX"&3Z=c^^J[]jYO&4hKn]Nt2nEZ(&+Uj8D8jGaLLq'<Moq1V83`o&u.[gZJ8P
%r,(`a*h*&$+6>hg:qLgfR=_F+@chNgLE237g5UltQ`64m`U`,[k.-4^\)eO2h,nI6=,Q.n:,\AmPP',!YP)X6LF_g6au@5`W&+@P
%PM,3uHQ50J\+dMJmeC]`P\u7g@m'5`e$YUgG5q?S:'/-IS3nb$*2V^O8)\j#;8=lIhpPlJ<+9ISh.u`qi3k;B3euOLZ]*1qIj<iF
%CV5?A#@/0Zk[l>PcAC<BR(_dD:8%T*;+0/Y.E.gDZ?7lc2\rnMBeEc7R\r!BoX+/$Fj]MHXWKUAO^4q(Ml=fV1db3GFuk*@?2+,)
%]^bHqSj]a6GdDJPDp&?ed&=FuK5APt2VOoT)tMrBNph,fSW%j:+.RLdh0Nm:K>B7fWm`%mh)"K*NpYiMS*tM2a!XeRbB9>5Hj>.D
%L?J98I<83'6*GWQb[^)Orb]l#C_t$/Xu)o%0GkjS%]>i91Cme&`r=jM3i6ZXT5\[hZ2jJdHiAHH)>5FOAcC*roZ'%>@H'G!Ce)db
%-Mlm"BM)7Tbb>P'GFB0m<"n'N*t7@\?.-IjF"UE'-_9XK%RWaBC%RJ+KEp=1o^qR_\2cO9G4ONIHY^,Ig@OIN-\Fb*>goi:!VgQ:
%(I2bgL:)U+RM?J%ESX5sh+?Xt-]Q3U>L!6'QeKF5Ce&nOe^JfR9fSpZ_DRY'RWi5b:MdX#.J$]fS/ZCTs1rC%Xfi\HE1\qH=1Ien
%"6ONGabYWibrB6OO&qhilC%W:cQ/Ek5<(M/7U9-\\oWC^o`KWtH15mZT05-"7W[I-4BYcs454khf=PY$d:r?&hfSL4_W-j7%6LFK
%UQ-pGGg3,J*eI-*QhNmc3rV]h,_mEKh$o,[kSJl"]3LH&K0/*YHdh`<.^ctS"M<SrJLP/j`kC_I\?DQ/N77Ftg<JGsFOP`Y[c`EY
%Q5/W0?H)a![<i@TgNC\Ra7T:WkdJ*t?+Z57=7.ff\]*B;9Q'VY\cu7%QYpu`=8(E\>BT=jEOKLt?"Vi34?1*i_JmsI[=:W9iPtbI
%Yn#0O;3a0!*+npEc8:==rb?\7]PN&S4)%1=31(\lbI>'3aMOJWNfHT"laJsDgb*X&K?\uQWGBcdLRh<:\BgN-_Gsq"[qg<Am5*C8
%E7F8LhP!V-I>mm3j"oKi>^g/QO%6S#]j]JqnX</^#(:RFa7b)]Wd`SpEN.U"*8"71%hH"!@Fq5`1m"&@H"=(R-\LCXaGp3GRfsTT
%Df8S(&2\d)]iou),FOtDk:YS,FO9GuYd\C,r9KfCNXj?]#Cg*#H3uSlk`;mrZIro-*`I@(iK@N9"4h7[cS->V_lGh;IXH=-mI]eA
%fp/ID]@k9^87*h(@'f?E9ua\P>GLt5GH;S&(<TQOFEUl0L:=Wh'Bc+SV4-gWhk,P[i;C0'llAmR>h6+5DFghMf=#JX3VM4Fd8^EJ
%]4"Hef3_t!XiK5#lSdnk9]a^Ice?:cd6o9:Ce`NnlSmruVYTGS5L(>DXuZB5)k@M##5p&JI<N6M`BHCeS9D8/VRq>#Y.BTMS*Y@d
%%Gk(iI?a,CNn\`Sj6Ec5NOjD")-s!\]:le-oWQqP05pU:7L,i`kKJ[U'2+I2Xr8n(<G--G*;ZNr*KR2sS(Of'mG.a1o;k/`<m49R
%f5*>b:<l]?F(*NU4cX?)abK6S85h\#Nid19c6-E!WO^qmh5[$UCAUf"QY\ZA5Ig!;'5TD7lL5$_*+$k_6p6ZWboMUcAfAp5`<\@`
%]'(5@-'iKppDa^[9Wp#"[b^C^$/pcdY'jb=39.WL\bFeEChC/_D]\l%_rG1fleM4%esil7RD0)q4dhk/q`;IgRs%/52R:Y2h>UD(
%$hb90q&Q"(IH:p*DE/Q+>l,ohhJc5r`-%CLmqH6c'=YILe?bs[qhn=L3B1-I^J99CDFc*=9_5nh=f9R&FT:1]^$,rd3nVlM.h="q
%SdsM1p<GOGSAWJ?/#US.XA(clA!p,^'s&`MZM_/JfpR?F=I;!6CHOg"&;YL5@!(7cbS7TJb&)3N$VC'6H(rF6p[(/99kZ.n]DYgo
%Q$KCtT(b:*M:msU2J_r2gDrA&J^]:6RE_%eZ*UohKCAs_PI$r9#5duE%\D:Q<rKQuhM`5'*isKqd\X4^rqq&Dh!?"_9Yp_9oOR:U
%Q\C^\8,"(55;'YuhVD@=>9,mj4'=c8hg!P[YrHrG^"^hmDHG[ZgSin2?@DkGnZ1*%jit"'?EF\j%]ZXj_Q2C]I&V3<QQ%f32NJYq
%[oXZ#ce`#7=Zde.Na<JBQtBA@DVc5Q<\MI.a3WU[Y-+!Mg[!ZcNt7]4m(MFM>FUD?9S:l-lcsPDo@%^NkI7kIkG?/;fjJl3L3\0P
%n@3N)U=CgNhHg$3]=2REBccABlqcHlm:uTuqVgh.YDo+Gm"`bgjmAAKXfe2&^9'#KZ=aQi`B+m<\Yk3QVO:i)>!M_h/t,;fG,oDl
%e_\@.UU?<UqFU@$hA_S!GFJj5c!RM%:[[V)4#06cf"W;V+./\grb=V]I"#RBWV5q,@sdH@5:kf(qs_HZ;u\keE3O=YIQP#f;VHK-
%d^W5g]<M!Tn]/N3qRuX*p!1PT`ueXC3dGshcp"j%FVcrr2G_2eo=5+nlEGX4a)^qOMo2sZSL=/tL'q?A)OoK*J(Y=UY<I>R;DcWt
%*e*mmg?9X64'Qt%lJ[B\g"/aMCA#F,W7Vq.4O5[N0'BL_KBA*>#;^DNH_'G>0mC._?%:3Z#<DhLdG3/ZB<>6`Eu+K.e)m4Op#dj7
%FuL3&A]qJ>T7<iqH<a_tHs^"OE;4"TY^btCYi!M"4/PZ3/,*u8_t'Y0>C"u46hP]kFM>'A"T%(r1RJ,blW*OBHf]/2`kpo4D5LeB
%n3,DsY_d'@[t"!p.JRK5EGNPl['I=61>I>,ET9R!\&,&[F/.ZS\V8(b2\leG-c_;'NclMH4?WQ;qKm0<;6eg3ell4F0jCcn5RH>T
%K`'W#GBU#^.>X7-X>Ta(iGNg.:J-nuQ(J;@S`\7Pk0\gJ^Gag5HahTVqsWFnhq\&&^9P)[p83,Bh>ObXleA`DoZUM'e';8ZTV!`i
%T/ZK7$Qmql*ueFdk0Mksp$U/KK82s0GE,nn8,)Ue$m5MJ<o4o-[)(JiYHsRTXj-_r>Kuu]Qf7/L=GIZr&f@6Rh_%%ed/Fc'l#EQN
%?@B=>^=h.a0trHeDIRR!,ii?\*8Zc_D&W^sX]rkjj7D6#j2-kB-d>o^lY80$_9.h(<mtaCro1fKT`0B1Gkm!8#?MC).%_k7UPiNM
%Ci=Qs?>MfBm(LIF\li/qJ,#crGP!ZFaK=fV0$N5P^(OK+O%ABl?+n^U]6c`VIStH8]!8K-D5gj$%mCGSPKig@TbZjmES&lLe%&]S
%lc1@lU[#aLp[9$Nc\:2sj7)26mt8+@Rnku/(AI.D%SQc-o5`YDe(Aqg\6r&iO6b&ubtk7dl4#YJm@Jd,*Z=Qc'QSo*V,pOiN8M#)
%ht.tuRcVkLKuZu==:ABFB)6XheCnT%X)!usXUi7Y-_#VZ@52H'q;B<hrO&9X_m?aWs21M7F7Sk0fuM8>m,38$EU^Qd]":r?dWftX
%EmLP0]=V*HfK=/OcM?VM]k8'Yn),HR-#S,*pe8usVM1AoG)EEPj$t3Yq>Nm*^N?d9G^nmajDT7OnS[M_YP,<3ZkAnboX\G"d1$:5
%E[tq'F6DB1b1$8.Sa&GS]AMaZ1"R1%Fm!iC(E7FVIdQEcBB$*qcu\74Yplo`*SI+ZA)ZD<d?-G=+5A?LjY(pe)V[J_XLl6u)a@A)
%SulYM-9j\]o>0SF[J]3G]uKcb:.bI(Ci%F3-??OU4BT<:*\oY=K24!n[at?+lHAn'gl(]he_J?YZOQNPiEGY\rid"6o]">p](tUN
%@hWX]E\)^Q(1c'0Ggj+EHoZD`/t"rK:\46<@?O9M(;_)GHTQ/6m@LsH5Q,DQS%+I(>r*nUDT+[ERQ5.YmXrYP`f&<`VCO$qa]95E
%`=rn@'D=98V(HJ3D**]e]`n?AR^)+@UP,?h>MWP(ULX!6p?'O38q/SP=ts6pIq&EQdbrL]g7S8V.Kd6PQ3JKPda.Yob?hnAFDu(Q
%rm@0`I/iHIQoG`49]<ui))"pgg]#B+)(KPm_X7!I:c*`NCt$cU0'gb5LF).Oplk'mrRLeqC*P\rQcS1oD1'(&ao,,N7)phQ6dX&a
%nHulI%#0]Hp"F:GF^,$":p8[llC^jpga'E7Yn+ShEbj=d09<eImJat'5<]R*UPI&X[,LN-?&%+'_3egPk=h@WIDA_igA:&oNSWNb
%%emB*#tFl'fJuhJNkQioIQUs:O2MkT(>%MaciR"tf&nPfnl*m]gQA_DpV-LuK_HEI+("YFX7nY:juM@u^t4WnUMm<,a.'1QY<FPI
%DVWRlb?D'T^KcsaJ>M#_I\qD%\pNcAnTss,hWi+sl*%_X[>jT/b2YFI5OS$SaMMia\7;/^r$S)/eE6;Lr0-WAnBLS#YBnUfT#Yl\
%<^5B/X08.#]_gK3q=<,UGA1otds0J_DQRf++7@mQgYV3uhJ[!LGdLS%Sa5[F/H'5k-NEr#k56%eT_dVpj'Zli_-1ETYXFP<q6g1]
%B'9051VMlWDP1<@e9,T_h:^E6(-ULDSV;?<[1C(G?>FKohR5jrn?HNPQ3Ik+^&-NfL"RCnF"^o"r4dN%RGl76\:OK`5.o,/j<D'c
%&F,GG>kh^o4X#;>eL-_f00=RDNl1`UVs_"Xj,:>'%TeEXGEo`EO5P:fT"(A?D8'8UgbUP+n#sE1rGmDTm@A1Ui)Vl4ib?+fAZ5B$
%,uFX%b0+Vmq9Ne[8'X;CfYMWaT[A6irQs<SBl(J4Bk2-u)JW5%\a5_/*7Dlmb'j'Ckut92r$?SG0[8hA6+#.e<qGS?SW<6ngD)gK
%EF=6!*'ZU$\R2Nn4=n2>pUb^m1X+!)GHuMJf^>joR.TEGq1Ele[L0)(Dq*V'm*>Qi)6_N;23S,rc_n8':VP[f2AP]JM$1P(9o$(K
%/?j<oC;E$2]K%IX.*M=piVV>CiR&,5"#QWS5!8/mm%Jaa4\8`+=t:P!Ze.pYp&3YD>HNnaKsbRP:Aq70l>,q`K.jXt_<-Z`[r5=)
%']qWN]lp5YI(IdOqg/-lI3b.Dm/AQI@344K<DP:AhrH]AZb<93Xj1m[BsHhhli6@L9f#UXCNVU!H!aa([JM4_iF2/r_]SRQE'8DE
%?[kg4h`>+k[T9tAbN0PtO)B3_iQLsbrSbpGr*cMq/)+oo:MUo-X2CD[T!e"40:'h]CY(ZK/KXW1jm$-P[5WTq`:gUK]!D@L^Uj;c
%iU69Y_KOO9%I64\\^S)M1=bo2WVL"Js+aNV<&Z`o*f$6%akkldZZ2\e\/SZcK/oFeS6XQhb,]AQPunupVo?L"H?[l@"OdlS?d)6`
%`io&l?-Y,C5l5tV_d(F)`l7l)op<@"PN@2Z`bTo:R/cejgj&WDIi'6M7k\3k2@n.!M^$!JS*"_i8ZoW'lrJ@N=rQ1@S.-hS_V)BR
%8*/jXO1QDk<6sD`=R0PUjipQ0qn]t%BdRZfp&!IPNP4e)^6nJPDliqAq`]d.fEp&?cG>e#GKaIETA+/.n](Q\cX$Rr-9-L)#p/Wm
%-%,=:hEY(b?_)-4fCNt1l:Q&kZgiHZJ'ZoT4LF:CU\Tn%L"t9LBs.HdS-jIUiVe=C^NaO:jiRD3c0&`q05KY[+1$s9pYQrLhX)l$
%XDdMhrDm2cbo[Gk"t%!u4F5A%rak]8]`WNrCgt]?/)/OqYO1,Y^"qDSFn\i+a:-a*YBG8tq-n5j0"C#jZTrJVEI?s!.&27_iR.&[
%P:<W"b[pJ'BOg"MjbU*ap3<.sXaORTE-j]:e!oJR+5a#U2d?!LE36d:?1Ru<mmca@Q_u?O+1UA9o=D,S*ZZhVn%F-\me%>7XlcNo
%pSW/ZgTJ1sRX+[FnE&t9>CF"gI=:U(CLWK_SaZ0J_7\Onlf3cVNQ&`s]K&]Po8W-XleBmpnbmfX]:V(97'q&OA?IMf:;YbT-^B`g
%f3b_2GVUER\+VPhn\s9]s*A=<o]e*@D03D4A^(MLg6WHUlR,Vk6e3+IAYnsrp$::'ZaX)g)e=.8^YcWM4PKch=RY+Z>rMO3D)M0N
%T+@e*.6'4dHWu,ToD5M_#PlBjo#Al'LMQ(#>OH61R9L[aeM$8,HF6WKG5/Xo<<)Jrj)\j\G@F,/5DSuVbe:gd:Q<34epTVn^1;1!
%(&[o.b;WuqGtq7_r2<M`VNUdi@q2E6XhP83-hj'"Db'LF*M,,n^!CT(ef3M,>O/?1n"/?aP^hPg5<*LRhkY8lkN[hnkO$hmF%k\_
%oCB#QX38,Gj42lZE%dU$SC5VN@K(^p]Sr05SBT^=nG^bkbKA;jX0[N#eYga[p#alhLS&OmMWV"N0sXaUDiI58hHg)!Zu\MpIp@8=
%dEK<d>ZtE^rUZ9Ags&&FQ(+oT\m)asDgsVOFt$nfbZk[l6ZB7'i2#uCLCAC)`$=hhl_=4Aqe4Jagi%&2bhp/+hC.sDYI1^=a5s75
%hVL)UZd[7:%Fi;nS2oi!m[/@2SHmE7SY:<MbT37:'q^Q$rHNXdFlVTKnCI>Ro4Ti%:=3q7>Xsk<mGcL5f)!dXU=r/0DsSK3eP>"V
%[pH2k++JHTL%=J"oBG9s*HU+8YCn^@#9Q-jYht5<\`\a[p&Xfd4^3;MG#l?3#Dn?BI7D.1;=XY@I'#MY\8,uJT)NPBjk#CPC&H*;
%lH8/Y>AQpB4#0#@5+mJNN>=`[*ks@F1s/HEhqD!uIS)E4<^E_B>D8WI(TEn+c2P^K\SmpCb0Ed#YBu8op8aK>%\MT7#*#Cg9:@T1
%s0?h$53C'`<UP,-eO%Yg>BfMlR)uY*qVAEebQ+$>c]*pTGP[;(iCW@;Ok,TK`keQ]\[hS'r0M6433Y>fPu(1N5HXX2j[ZlC=EsJt
%o*ZHZEuFh_euPt1%\>N4JnW-+9N:IffMfi&je\`;+o9?&'sF4RkLOsmo,eXlq4ojYPj`PWk>q$@rOprs-2^-*fC%9KNE^S2-eET%
%fGlgd[sf@?%FjVGb4_ts5r3^D%W5=]R4"OE_q%<Eh6Y3bOC->jD$H'M&!,$(hDJ+'5:_&<2!(muPrX>4A:ju%S%7NJj5KFG_UcC(
%1PXeRY1i=6/*"[:[nY>Rm'NWa1MD2\Ff!]Yk8X'8]kq+o5jRN=l`W845Cs9e_W0&,\t1>;WRLS+dG3LP:\G+Won2\7jV<!C.pKFT
%H4MLfKN[QA<^.XD1hofVA%Ri:e=(`hoO0o_rbV52Z[DMko_RB+2uWO'=`A^*S=uPpFSo)#7AI;@IS<h!i:QpBD>Ta3#or"I*aNlB
%P:,A+rT44)^`%9e*';@6.pq0l2riYpf'9LPqtA"SiUnt/"Ad%R8D'hn=%5Qh"`om5nuAt.\8%&Knbp2R9VBdmK8Z4GNS7;(VS-!2
%9SgntTDG+ddco_!jhpt6+)9=Rld+-X^)Z":O'jnJ=5F_-2da:(\VYIlaY\@:enX*u=FKu3]t#Ai^0Sep(4R?lPQ'`DEu@/&DnPD$
%GJ-pqqr?sTro;8cb83UBr`a1$e'>)t!PJ55h:]F(gM+:e>O.?=a5tIgQ,SZbh9+bbpG^<+df!OTQ.CL"--fLM:!)YAS^U'rRH)QJ
%Kh&2oS':q&0U7#iYAPEl<pZsbq<dWD3[;4`G^-I!>\N#EZdr@'ml^RDq.&;%S+2rms+QrTrk<m0qXNt4`"F'aJqp8#ro-[%3#I%Y
%F2?V,_BX*n?tn44rV(Amrr2Enk;dIIh[=)5<KXd#DndC<II6b:1PVOiQrDep$iR,)g2:E`I<A&8YC=(ZF4571CtG0=Zm5NZf3GZ-
%F/)3Bjn1W.U^#keG&LriH,'77?tJlWbI'fVn[[K5h6-->i*+n`>rMP"JD@9aL:P?.4(rHDHtLu9O$D<[.!RV_]kOVaSM(N.]7ZaL
%&bj,]cTA7gqOkIjrSu"HF7*3-1hHP+Q1nKiI_(`fB'\cZ4)`B)*tC1=.eDc0=7c%>CB++aL#@N1EZ4hW\JKM@\n=ujqt%hUVqUZE
%Bt(T?''OdO4DsLB8,"OK?FHIg1/H8<k36Y-ml-'9gj`j_ZbLnaW;3Rmkn_AM3sm&/br+_OZ@*GEY+Md:/iB9qeorKZ"*0+)?Z3@7
%?EViFZ$GqdEBlnLc(J-WNp,20eFLWYc:1r4P?u_1mENSU_dK?G-<!+[KB\`\8\19No]KkQ2qgKF/iNQ%DS0]^R/9pgVYJkmET8IF
%"j5-b^-@"Zp$>sqq;_@#e!j+Uh)cOk\b!h!S=Le2pODe3Ks*Vb?Wk,9D'j"s>i/c<GdU@,mTWdM?J696*'A[^G4kk&q<e%UNA%d,
%a1M%:g=5i?cKSuV2g.q+`jX%io2o-hT<2l5mkC1"6]L`leBEF5!QRi(p"<\]5Z$V(%VC!+_DHjep5e!)_f;l,K>@sJ?MZF0=VIui
%h(=BXVV0[e[q@N-L4fHu3.18eeTlj&0;,#2pCGKa2oG/td-G$6W@1=HhF,$uE;';[ce)d`%6r>)j\-KEPcWKgII^BY6ID2f_Y:%a
%DZ7OYe%J-JR+jjJH%'G\m2gDRq+Ru&]D#M.rVC8f?]K?RG[\(fDdU=?K0%T>-WD#%X$4]R>ON!4B<Nj35/Xh+lrc7V'XQqMId1r6
%[uWVs^!CUk4"l9A#"8=M24q8H2L]l+#@>*GGHUpIQFH88F\'2QFLQaGosU\^r/S@\@CLL!^^Nun*k2$%mGV';#*DW(L@+SR"i>IY
%bfM2AhfCtFl"&R>\2+Ut+(bFodckC6mD#aRg\m)EY07,rEcnWfbd9n6O33d3X.6J`pS2-:k20%'kO&'5_+!M!B2Zu3TOY*9>-VXl
%4$@J*qjD=dbfe?ZD)#N=`X_iW3&BTGh9eM9dgb0Cd*D:;@G]o8V,O83k4B?oCIT*F-aqsrrFYP]ADLD@Z>7cWj2+bY37<DiUWc1,
%e@tl?Hc`[[:2pNVmeQMl2",ff4kp;JA%d:3^,W*MbK]YiC!!Ma%Jk^0PMtH$dkkWjYH*Rd>c3#hllWlAkpdi_Eh`7[&(<`*a(I>P
%S>O"PC0GsR?bltJG5--j<t4k%gV*<jZZC/,[bl"IHe2M*olR)VqQek2JZ!r.mZP6(OXLnr3>BrJK3.(lp':?uA*(;WFo=!=Qi%BB
%hHmSR5SVAm2JKon_ga8jj[We4rqens;a9Xk%]Q)uO%.Wrrpp/]aSI:EBiG&JE)*`''j8+g:i5b<j&2>Fh<C\UjfLiD!Yg"5_69oN
%j<NlPpGBLQlTR7e953l6Mj>g?gbo%G0Ke1(js/BB-E^YO\\(R6hu1UGl<R'^b-QTm=YorSZZl+H2p8=9Gf&@32^/1l&$/OmbksX%
%Cmk<t@^AK??H3-qrYU':V:X3m]HQ*[cV*>W?%Q^bn>5l)qU1mK4d.PK150c%r)0uNc2Bm,Qj^@JjQA=grSV\L%.gj8#JYcF1lp8I
%epD#pn>SN_^SL$UhCE1Gh6V%=%pmT^nR$eFEUi36^])W]qVAVO"YXrCSGi6gI?.?>;grlH0suk_,69'[r;"D$T7?Kc9#>KfaHfK<
%>cf8Y-'U!HWk#G6!hNT/Q7LZ2nqDJ%;Kq"jO:T(E.BNH^?/3h=,>N0DgC(a=J^+O=O>"I'AaAGmYun8<3)H]@m2$9IX7])aA@k^B
%k:?6f$$,if-"ju-W0jbh8laX/@_Pqr#!H56f1P`IV+e!ja;,-5TP(-"]7W`'6u1J'Y#<D=W*IQtCSc?3Em+,lX\p]^eno<8)ZEX8
%<Pgs*I4sd$XBN:KmUmtUWn;`HO^(uj;M-"PMqMjQ8Bh9!baE).AM-Is=u.q1F2@k&9"l;E3S9s'PH+q8To(]O4d3hWW?ZZ<Z)q>^
%Cu<Rs`0!dM.ph[5hg2ikM_HXSbJ6=0?IdK3J[s]58+u=^?ft&CCoLYh0=q14S^.H-Wqe\g>ZJu!bjWHc37p"\Fe6mK_(P*K6KtJs
%%LYI>4e`Hl]>&>2lsa6]F29L/htgg1q/VFp7MJ;_S*uN?&OsK@/Wrc,Q!uXaioH8;V.T!B<IC-4lXnXe[DISiEqsOF<m?h$.,slW
%<6lk(L0[.-8475_VKC+)8[VAMQ'R<!9<*9d8?H,ARrCpp-E6<0a"U8\R/\JS.f#f!_&7)rjd#?"qfd6XV.)@+eI0*$.[>lgF"L1J
%WDq,RTMd5&@k-#42J:$F_D/T![T'I-L8j<P`RT9h,cVH=ZHMn<Jk"BG</a5P@Ur*_4MR6rc!Zk/SmNrNdn$lE-,4E?oaIhc;b&NB
%^D%=B(GiAM6FBWa^L,3uB6N8]XB[?H^";O[Q?(5T%EcN?)i6Fn68)@H^0)pTXQ=c2ke![SY@gLn>#!hi&J;=EH?MS1C_nQk,$HcX
%K:[?p0fS.4HPQPjXB[S6<2t<R`Z`qgUom3X034h^'4hl!@Emq%A#.m.-$.p$nuVXn.@EDe.eP9:V.>$'Q>.0*9$'2Jl14m#<@DB.
%[J[tF=P94BbN4%=]tt?nZD;eQ5r7jB.Rt[d1GYeJSm=tMK(WI#ZV/F<[ns6tXVcguhiPE5FUVc&9IWi!0pgI-Y+D\lh_@Q@l8Big
%pl6fSc"XnT.q^hP/dB9Uhhm\>AU67bWeu(sf0\/79Z`g,/*1#-*Q&K:ZD@>WO_36#<":+N=YeAbcS<C2SfHso.@*[QV80iD15B,l
%OLdVu$tFER3DkeckAk9c`\3^cG+_Od-96.%0B[U-XI(eVcXMoQ_M\.%4VC"P7ZKNL"jIoF<_MSDTu*U]#ZstfS"LYF-<^m'W*(n'
%3R9%+WZ@hFs,:<`Qps]!Br,>M\\950IHhZhC6M8qCf7`Ls'!aHs2%YfBC0)ua)aotDpIjK66X5iF7qG1E_N0'bYHrK'hWU1K9c2u
%;D>$4>*7T,!KjW4H=dIf@&Hg=LnIeE8Z+\KjK%EHPg:(,VrXnU"Z&j5'FqZk+a&4ufZ!-?C8.5-/uVo_N'dB3OuFcV@"u^C9"n^0
%>NG&/I)2=;o6FYQaVP?W8,uMPc/!071bfr82s9FOTh*N(*"aVmWok-S_hOk*&<W-<-scGr=NiWOkKek4bXJL-aR]as7^.%MUodE5
%]3(V%99`B!2)SSi</^!b8tfd.Aa:"rPe)YfpL*.MR4Ib^9.<Z_!LO(lRA\q_F^iYK1grdD;oT`;3A?f_5G[B1#b\Y1W'd^9-l!O4
%f-AT`9*JMtEFg]OJs@C##_uZO,]eCfW5WM6HD2s"#01J`P^\NA<@X[V4HD$nE`P!oTX&+rPh_-UEm:^aF9ZQ\:nSPCLbE]#WL(bB
%'TPH""^2QUc(c0M$C)hJXVmPT3SuIO_-`T3WMWu<J,glo8GX[4lVkhXhSmQ@U+BgBRBu%j=0C?Yes8%G4ucViOGf5lYb8/3#U3YK
%ON<*5O\E!pmK"r*I(6tp1lGAE?!u9?0gdY*jl%f22o5I-:Ua<?[</-I,_BcnaD_NU@($6(#g%[-&WeV"fb,11GWh4K'mj)_T7q/S
%Kh"8D73&#.#U1B`ON;g-#g1%h<-H-aW%oYC!qtOfOh/lI3(FP7+q[e46q1D-"HtE8M./#6/OcI6bdBjY/RFbhA"=YnR/q+1?1PU&
%'?fA.\/$fQ66_3c,XEVA/Pm-9/ZLl5=B(b&JV8kn&ZtpqMmENe/J:@O87\;\>4?JH.7Di(.@)0\9-2:i)7=]`P)M8EQt-Di,on=0
%QppqG>R2N]8!(\8$fo5K$WI@G"j049!bRB[V!_/4c4NIL8-IHe&J0lehd]ca$jB\-</S1,Gm'$i@e%#S)=-g3`s`5H3o&[+/7Jj<
%5nF&NJjdU[+=F$fTK8_q:aR@t0XE:(F!"\-Fs(lq,,c969Wgo"*k3DZ.&A-<;T*_#_c@uA(9^GqYm@PZ,M-uel*-#"Xb\Ej!7?U!
%,1$WP.o6p).hEcs'SmD7BUF>cW86K6S107q5t%`<6k<@]-9PI#.T&#kWhkO;PfKdl`[tMd,\%E-2G#9t,0/>G<T"!f*uY_J"QEfc
%"YsO^"_n.(!_":7iA.52M0k>A3'e]&7&4!XoGA<W_F%:u''2ud>)KgbH%8Ltgu@ur17$bH)qP`Ql*uCkJ;T^\R1G8_(P5'%.?G4\
%.8ZS.-kN6Y+C@T:+ESo.S/I,V5t%_@(5"'AIud6b.MP4367Lpjj&%7fnVYp>a]N>64_DK-dU<ZI8eEk0nBc\N+NS%<"bL2-"hFeb
%!c9+_#r@Vd@eXjVk6]"&&95Z5O(f;6G6*YSM.]+M0K4sk<dB4i7)g``HR**l*VPkO77i7t(e)9;6LYK?@L3$dV[qc`0Sr48$Dr(P
%3l*AN">GHs&.0I@QpHir.53/jm>rN3ko^*tp<EeuPb>OC<(R\R(ZnL?7k.PH'U#_g%U[E[TVTIA*e,@t:m;%oi#YF"pdFdClj72-
%cihcb6j69FM(%0b:RiL44HToL73Ze#BS*K&<!(&BeS7K5`R%1egu>_5_Ud1KJ51Q3RhY53>WM7?-ad=_O'eu?#Z)$W&p.#"7[Xp2
%H8kR\AHbcO"X(<,6GQhPJt"+l:+E[@/rOugo2K*M'N>/9;C8[T2Sn7,2*hP//4#9d]C^_APK6;6CQ)dTU!'0<l9Q(Dg)aoO/l6Wl
%&`=[#,g\sO`12[!/rt?8-V>0djYC?j$>7@HCk*E8O>;qeJ-kpEI#4'fQpch]JFnNRP/pbEl\oAUS&6,CLJ-]IHZ4fY6%KJ5!-KEH
%i"?;ffb,$j"%cIX/cb8g=<\AjY!dYf$4r:CO[W*'m$sIVW;lpTe>RrX'VH^,;XkYM),'*G7d>O;3SXt+L^+XA5Qho/Z3Vk0RYW>B
%j9-NT-m\lT&kjJVB9kr%J/Su\16Ek*M<pZk&nrH7LfC=(iY73e+/O3&Oc7h13$S#,M&^:A+qY22Q@T=g%3uQS!]:QW!m(a&!`;Pi
%asDR+jN[UYGQ9TD+CuaTi"=X(ZQi?L5S5GC"2u_I87\g][72oP`:`pMmGNd?D@[^!,:JGC&]$>t'*:ZH.,m^h3e9\l9*mkr"H>\-
%`/KKc:kJsWR?GP)M!U[X&Lda"L_Qh>iY5K?103pK,8gmKYXUZ^&NRiP/->JH^X.cZ)A!.i,#AlV,*87D+V:COTND7aTPWUU+Fg@V
%"0P>>@Rro\cA[RD!$F[ee3J!\+;,QmGl<__'l`h5g&Vd*D?`MI#`;r%7.:U1$6TC-&K_(r3>r$hFMC2P"G]8"_M3jKd'a-`Gt9)4
%7!?g[LboVJ7-`5dE=*Bm)5DF.Oc3:Y=<dE7L`C:C$5!AjZd=5q(s!pM"F;7="JQP0"L=6lZqEZ?BUj>Z0`l+:5Zf=q#R8[&&RdsZ
%47($!9HVIH=F'uR&fIHH/Q#3]Ji>6CH4U3l5QX5j8J&lC[nf>!i+YMD&558:#D+C-7t"c7f):Vs-\XhT+JB2LDNe>c\44!nE/@Bk
%7!;9%LU7NC6]0>X0a`D(N_[5n8B.Yf]T@I76]SS[Iu*e5Va(C+"VM.@:cU!%!R1r7!ED`WQ)ihu#b8F90`c#S5fuJ15p+`@0cqf0
%!"Td#JFnMGO2tGBCQ4"LCSr3J0_Yh70t-B;*p+Lf\?Q6.JUigta<K9ShH#<5p)r),hUD\;qk-%;I8B?#TFlNpjO#%EE\2[G@,/ZV
%C"_Y['S1e!WG0:t\@iRCTbTQ"6]70/\jF2&A>J5X75@oOAVD>q]S@JC`]_6D^aKa*ciR@gH9b+3H][7Xb,II"8gFs#_]I/`diRKM
%'S1e!WG.$4\@iRBJI2C$TLt3:1W4W.`[Y;),\'gn`^i2Z+\/#9%l",F$3Z$h5Sg%7.OJ^i890aX+B_;^Pch;5&3.QK@KVjFJ/"ts
%7!jSKB@[.gJF,Ua)Nh0VmL^>9G^Y^5[;G[_mBhWgD874P!C.>)#\JW%,!AmsKR0TT"RT#_+qb6L:_2cZ=V#KQMEjGLe22_>_Het_
%J`_N,TL=c1:RLkF7k%b3,\'7^L.FDm+buLh&$Z*O$3Z$f5SenlW[&cO<,b0IW$i5aKhJ3H`6G69=9(c4+D#:+Yo_l\RIi`J+?NDr
%7\hgKHUPk'?=tNn6!Ks5;U0U0d:UlqMu\Mt!tMVe7YpY40bNWCRM2nmFbrYf>lm/gi^A*K&Q",b>a\,me0Ea1K-$rk?jE^]LieAS
%O2tGBl\o@*D8R6j6p9TB1[+r5$ULHea&kSDKR'MJM"=H:$.kk[6mNHtE?;,q!^33*.7+->9VaE-&al2M%o`P3"'')(3l@mdA?=du
%6Sat8eIF#U4`Ib7oFN5IUsOWZ/W_9CLFS-7%i(Vp3`M:U#\?YrLT4Q<%l"&&f75AIEsVCDGKlK[=pNW0!];2#@+$8T7^5"KP`/UZ
%3$Ra_LE(0n4N%4$;!@A.YWrge*i^N\4B->fFf6i'$)L:Z#8GINL\Lj<BHXBSZ\\47V%B=_FB7%&*BJ0k!F9g[cm(;8nN%j3CYNer
%g,T\6rtP(?'u=l(\9Dt`"eI!(n^(ttKfjH0ekmGK'e=iSc:K/iI>C_B"8>?hF^-(pFaAU8bTkmt5os\X:^=#LM"H6XO3,e+f*]W%
%bD$b[Nd8^^B$*KJ%se9Xi@C!YL^-MN5jQFa3+4jIQ&%EY.cUPT1ZT]#5S48mR@6U0LYFmF*a4+K*Eja5kR:l@Og0eq)$sNl:-7QG
%DjZ/I8B*dYI<G%TW;m)G?n@D\YP#u%_hV%V]cQ<j5C??FY/<F:KTGDS'T1kU1rCC.!@.O=4G#`_1J%"GN_2,PeS6;e*ng`/+'ON6
%ci_6Z!*pf.,<BT0RNrb$gG0_;G2r`qS!adH6>6cp!*gY/?h#:ko%ro1ZHMRW4.S,Q+p)BI"&`e&"-,Vm)NeblOk:1]K(':MU@7f;
%C,LT<&cN@_[s22AN-0$J,jkL7%Q=J40SR@YLk*6*,/<OJMPBinW9tYq6/%P/,chgg[*BKo/:fi=,.2/0JKSWW=V):An+i&S2'Q=8
%(*kqUnX:^@CYpg;g0kO4DU9NqK5q``!6%2=^\S%Qicfl;Fb5+A1(f(fM$\a_R0eEh:l.Z;>"o\\"T)gc"D-dY5GV8<8<4SrR2E2R
%h3!ZhDn%%ZA-e2QUEQjo65PH.b<R8d"pAu+pOGMO_Le^A&V5H=&:r+E&:kiuM+4:E9dE+09e[lF9(`'(;QWEa;bW$9a":Ve,\&Q6
%T1;e>M;W>/-N[3pJY<[,1nYM2,mY4(mf\42":S.I+p&2e/YZu-=p1]f,nt@L,*@-_1r76=.a`Hk8@9@u:,+L:*Og91P)MhMfHca+
%#`^W,,O,Ei(`Euq"6/7jK0Vp(ILrGP-kTH)+qQB#,:[\"8(7iC#t8+,87ZrJ9e\e`9(]e>;QWEa;p::ja":>1P`r@WY22]05ba%'
%#SNLk)%DQ2`dpOj.KjeOGD/;)NYt]&8c\E.N^SRR*!si>$7Oo6e1;e8Y^_C!:kcV.6jhJ#oS6k<k]k'^O(>>__]ENi8T;0W-\3.#
%C1ok7%cm.q6Qde+D[:G4r.o)$&P/:^&r<*P&pOJC:a@Smo*?k?FVc2oFQ-G0(kT;4$0Wk"O<r<EMUrok=AO]8dZ0XWfhg?7]i59O
%JQj\a47Ml.Y7SMq(;3'<e%C\fd90c^?j971'7K@H_F3jg>R>`DE(0&g6Q$R(SM1_AT^NAQ.Q&Du+j;2e;XsT-)6<#k7G9a8*,PmS
%hucD-&-:mD7"1\_lA=@F!ndl_U=)Ft"g#3?Pg6cFr.%Br,1UEP!@QS(0dg-2hBRVe&OE=N3Jic#]J`@6H@";='DpQ&.$1,9qfj#Q
%h'g9o#Z)$W13?tH=G%8N6RVTT3W-5u^.lU0?ABVh6H%Z[\1c9/keoZg=0)/&#G'MfqI%GRQ"WRceO5!aZjH_0)-#T4'.ju,1F$0L
%kTi3(nX:^@bN\+nDAM*i2`Cr)-Er',)i0%55U)C=U*:pY88EML2J"7+M25o71kEB/1k?*4M+4:E9dJ.TS)A4MO\3ESTN_2d)<hit
%-IHgkf,Db57(:a7!AaK,]tnq"S=mq-,/?7$aES#%Uj*3&9tjCm"Xt&I<q-e.SFI6e!-MsCC=P_h9@/:b[5(Vc?kO/Hh_aB)`-=jq
%eDbU?1)A6=1M.b&IWoFT.=heidQdp\#I9^GJVJt0;5rL^AKXK2TNYesTPnF7?isB&&ZJeEKdjk;^$h5K1-gqo<;NU4f-=m"-:TOm
%9-e#Pgfe.kSE+n'"G7uhJ>*p;!8g$cK-\eTJKu^&I%q,2L^6sQ+:6!2+:1/\8i.aBC*J3SBYsXU)6!bk#ca`iRW4m-O<cl)nTlDt
%/*+N&`q9b^n*UX^8)OO30f1)u#/n@M#\6?qLoLnk.0E!_!oXbTU(Si""AV3.'QMYIOm*H7iI/%k<!$)'e^Bf/\5"bA&fnG`]hqA@
%$G#h!._u]:?3WpL"@+[u,.Ii!_;GS57,Wk.%Gr]=0d6\D&icWN-?)@I+I,d!+G>VFA8hZGG[E-LPlMI`[Ig"GY#>ah7)plc>9m]i
%4KuftbfF_k%AH;L"Q_<o,-1t]6&Ruq7#S"njJujb7L;>d7#S"TKbf4A:]X#Uo!TX^,$G-HpV('*WW3ui6Kq-U>^r+VM2kZMSk-kA
%\FmcKTZHTi#t@>@!)OIM&2433N/0_fKSZSZnD,i2,U1Se+X0`B,9efC.\TC8XQC*=6E;C,MAaVT4!I'?Q1:\,=Ha=b,W]9%H6O5"
%iRSYuclp09-\r/XMh3&f\:YDB"4%_#KjZ)s\Ib=(PqSK?oW/0L$`.*a5#NdFU,P]I"MIF;,5!.R>R:&Kh_??%J-&$%oX-KX0>rQ4
%7Oh_#,\+[FRUHCGjEENb_]TN*iY@7L_*B3^+=a)eXX&hUnEi!X,9j-kKg?i"L-]2K<2'u(<YGcDd3eW]Al+>W+'Pdqmu2@G@$'T^
%`TrNEXE2_'Jc)D%Yk'?\S0J[iG5<MPRT--c&TAOW,QbnZaLH0),6GeS.X[F:GRl%2n5[mLZ*R+I;F(GASWBf#E`J/#Z-uaiPV+H5
%LfCF37"Aqa9RrcK+[Al*"OJG=5bb"hY;6fsbj?IXe,J&5*,UEri!@:P&-7B67"R]I-k?MZfa7MKb&e4$QsgOsSRE'h!gRFeWmsLh
%6*prQ6)5-I6)7\DTMkuG7)plcQR$+`>?m?bf8ed.1D^*k-u4A>GRPi1(SZd2/jsh0'SpMQ79%.HKg=tJKtn>"6R,L0-5%,H(-F3;
%$;iEDMUdN)M7J`3W5WP8KIh_58^dUl&KG[2,4L4O(Pi(85SbLe.OR\RTK3&r:o6W[^k@M/lAUP7&ZA)B;QV8Q,(fc?Lkq:hLkq:q
%&a9lP+ql1:Y<*B&$ngs=qeJ]@XI0iT*L+<("H3NtM&&rK0eEIWJIR/c-)(Gf=p-m!=p0"6,oVn\23DPa1uZh+;MigG;QWEa;bW*;
%a":>]<"lP]NouOh^NKa8S&#](6;\/N#d+3!&3-DA@W2Ie"""(h8jkO1i/"D(^_)q8Pu+8)KSiE5E!/m[i.t@,i.t@5&a:!^,LLLh
%f-Uf,+W$WDOrhFoApQk9!$4KP_JDIW7$":*Ql^h4^ktC>&lIU#4e`Q:H:4;HPu+8!n,@<`9TPhQNujEUPTGs%2'ST#H6bOhnTlE'
%/*67ib$R6)LRUOAQpMAoN<mOT6ifkY:(3:NFi','QnG'&-'1NK/g(JEJ-m]fQZ#`b/-8DIIh*fe.MO.j68]tc@?;`q?Lc_o+cGJl
%O0lZF"G`J7&sr]eL'E=l5TVX+.O\n$TK<]1d&'31_Sh[(m*(^0'<$R.@Bl7k9F7i5J18=QZS3\mS!JT-nd&/,*Ns_TOcX-rYt*MT
%4/-@T`Coi$+liiFZ%VM[dtcp/3f-:M$)W!%-G_7:$g8"bi[+HZTm2FN8\#K+g>Rq=98DLQfK8+>;M*mS;PcjY08,Z[7Oh_O,\.3e
%I$+-SNo4S,B`]A)]7C7_%O;[$6@'j("L8,2!bk8["K\C*Pg6'2r.%Br,1UEPOXAcbP:!42U^=%i"J$ab,W]i5g*C+ml"PY7Ln2*c
%:501JfGVt^KpWMV!.#cIOHX(le)O0h`+uS4Tlc,/fL!,Pj%(K/E%l3>B7%h0HHkJEm%eU)C4\2t,*cmeo-S.&GS@3ti?_[/"N(-L
%C_@bjGg2A0ATW4W83:X>UWp$"=@)0\#lsH[)PJLOQC'HO\Hu91MF>AhQT5^MS2h6B!G,q4.b-rL9[Eo^-E%&H$*)NHfHYuAU>lul
%4-Hjt%X4]h1;Vp]a@+gVgkGr^Fs)bU'.5-g91WtfPGff?&a:cP!f]!C!\9oLNC]V/aF&iO^jHFq!DS/T2%oP:iKED<`G:KE/>'g"
%Bno?#\,hqP&X:k.!.YR?&6e(X6sPSK%29*_W=]^pE@$]+F!Yc,b0YrDWeoY+AH0l=TF=XB-rhKXG8Mft(o^VC;+noD3F%\iW!(/0
%Tb?mH;Ap/JaFQ078t;'#-W.:&*e>Lm,/PXt"Su`%"?&L_)NdWLOa.RRJp@u.!dY""C*`!T_^*Y"MUrok==)S^NKh=+38=q+L`;T(
%5X5;ZW.[t[-RRhD<,eL"+A.WLG)7G@PnQXh1S>/6']go30%&]MU^?0S:^O'4<3).S7gtMJa"(JC,\*Mfp.-JtJn*"9#qQ'+!s&E]
%+:UY.S:ZP=;3c\JJJ'gaJgGk6V+plD3^Ci\83st!bp@]6LbusG#V#j,Jnd.UoSDIgk]k)4M.E]JX!^dTO6GOLGXU>[<!EC*DBM[#
%&Z6o67T=5VM*R..Lhqne;1T*6!Y_5PMRX!NMn'GQ5BA'J!gErteO\%)L.7ot'X'*OYpp5fU`CAiiFZak>Q>07^C-uk/4)grQA?>S
%]n$ZE-8d!q-!g]uB3k^I5T(7B$e7B%7<I?RGS-K3G'Jhg0h];6d0M99*N+.!Oc2_KfHT^eLn4bb(;[CE0FYLW&l&O)(Q+*[8L`ah
%FLkMW&Br]L+>Zp<M<KSGE[#hMjP&4$Ke#tQ'uYsMhMDn3$(sU]V+-&s&0ql+Tm6NtN7DkA+mk?sN]'6K@K<5W,QKM#BnV:uP`u\U
%\Uas9,W,Y^.N\_G1EQZ?TF?fNV4,JQ#aul"6n8if7&ra%lk.&WdIE+G*XQ'N:-0Fn/eu6m!es)/<.:uR.1gQO#e19g&ftNFpYGT/
%.3W0P(kVE>n/ulp,%%<iTGlZQ0d'rW2=-JJo-&;M,?PdN*?(&DO[jYP2F)Kmb&B%j(+K?,LB*J#LrF.kA1W;TD,f3i&KGWl7,S:2
%/eA&QJODgm+=O*T89U"";.1[,jNEX@kaWM&\,g_c6u#.3+X5V?+X0egGS!iS&TigOOm&1Ol]>YYK>SjHLI?*k)%qKDPeKBcKE`%q
%'2_1I.71Ue>_kuc!>2Pf+sM-k6sp7!Tb47<H%_#^s,;e*'js@)W(*RE%#RGC/67DQPHcACK;9M%_;PSH!\YsOJI!)%A.^;cE["[T
%<@;SgKW,!70>Sj,F(Rl!#1T=YW>0]1MI>n3MF\376;XOKUc/^?9T3#bc:Gri31Q+S=9Q[5@1cU-)%8pKBcrOW&X="A,H<f`6Qf&3
%LjTLG&Wnk&!\9oRNC^1m,?t?\0J4P\J.4f@)NbLa0G5D4GV,);'le[$83&AU_p,t&%&"Yq7YK<B:'__771hDO_@oBAg=1X$R%P$^
%SX:!+!d.>8.,Up<jtSWC"rJ5?1;J[<;N45&(`J6k=hGMA`WA.OP"KBja-`P4FTGSQN<l]gE=b%&1*Ua,eL$dl"K;Ea/V,.n2fU)-
%!i^erY#`YSC]k2$2Bl^_&OE63OUa**&fn<'I?BI'EqMlD_%Aic"HL8/b%56SfF9)53hgX=H:1cr?kMT8^Pd=C*eDIf*J"gL5"/_9
%80W-YHY7Fg8cU5j+uLQm@<a%Y<q0?<)6;i&7bZf5*,^L$?j&_4)A$cgH%_6WTSO^fh$G_9Bkfm99E9ntSbWlm!Hh3a//;lPO3jna
%i$4UlG-HeJ4\J%AE!.;?N`EaC8B-6AXH@[V7*gMnOQ[uW!"I^a$,V7k%7Ng0Z:ZPYS]Z*%#\J,I]?F5'7"PXQAOuI]aVCK#$s+W*
%)2aM`hh7(^qqsn>Tgkh""Hc)A.:,dqA!J%*8394kUWj>V4J6Kp,2bDA8/MZt8P'P[ST#fMV?S/M"\D,Eb`T[KW'_e-/+Nrjd09k$
%5oIOuBVgNX6NiQ?a"1PT,]'#6m3%6kh[8e@)'l0qWcjrC6uW>S!'$'2+GjA@F5O^0+GjBs$WaLJNS$\4&51DA213h[OsF-CZmT`\
%8aOl6Ydf]c1a:Ib,-`EI"L04UM.9&_=9PEm"Hu5D/RFVdA#W]c+)-L%E3pK0JKklU5QhW'&d]n9TGT"!ff=5/P_k200[h;/3o_K)
%"=hfT<3(koP@tWJPFrQH,H-nPdO>5iU>m#i9CfW(/===%BdZMl]U:1!/!SLJ"=scjM'u4m.8`FKb:*t]`/0:`=HO5PSXC+8!d/0E
%C=P_(9$dW,,q&m)$&YR8lOm,Bd8>hT--97OLJ-'UQ/Hlh.tJiXeNa6s#I4Uc;*>LlU9YGi7&?jp;(uu9coQe*YQQH'LfCF36C)$Z
%9U;=[J0ZP.,-FFpQ;!6>bk=TI_E$tFG.%MYS(SGL6$Wo-^iU]]fFl^JYpCk]5tP%E)A*,d>QUTT>lm6`&rfGiRRhZ0RUEc2Q%12I
%[1mVO@_O*KDDD#6)6;rs9TjG3"NQu4'=^B&%?1YG!ML'4U66_97$T,^M5jK!,%;`i<:5F,^_Nf$,-G)p11Pn_Qn^lQ5Y=j)79l`-
%15V#qbW\V<C-$a*9$.8AR4/fW!lth1#i,N(&7qRs,0E=8-;]Ok;Bqo@_G!qh`0mP=U_8QpC6?T1$(>8K"I4Kf6+%DHSRU"m3c6[A
%,8oh3C6"OR-@3<221[7lj3WUT*_7!p7.isHM9=,;-)sWA7)-[/W6ti-JK%Dd79l+H7C3Bpca4"Y!*k+B.H:3A\4LeT@eN;I(=hB)
%[.>V(hTVJ)%=gDp+Ii]-Lc81"&T=D\'>-`PW=dN3!@L]*'.5I;.\TC8XQC+86H_$6SETmW6VMTZ)?DD_#]gV!YF,9NN!4D",ONj7
%SduPsd>N\i*Os9*jo\C%$D$B[Q9lr[gZosqSa8d1k-:.3d>&7O:@r/@Q(V1h=/9.bPWQ_<M*"!0^e@QN79j1*4Gf"rbf32nZ9!r,
%G4GckS&l<\6"pfs5^X]:a:f2NOsd7k!DQO_)M*JT4b;+N4b4bQM+4:E9dKL%RiqJo.hU?#X4<#JMWg8f\AdfuKWV>R*C$gP`ITWZ
%5I%93JUA3r5QoF=&d^e-lcedTq@l.#<kRfp!1Og6L4Z9n/_l2<T@D'Cc]"LKebC6jQ"U<N,*D@.D1_6jXi/U6=tBa'-,NHPUDC%+
%o#Y!9(NZCC5Jc;jrWJN`U&u!(+%R[V"H$[fKQNOsF9L#[`$s@!:IONmT>2)<6mJWGM8Z$"'?$N9'$qu(Q6Oa+i_Q</(:-_uZ*Fk/
%Un'`dnRhb'Y#(tt&TAg_,lU1XV>LW+0./F>JN+5R%2448@V>ZCSj4;76*3['rWFf,ItC!PS"Nl@\1TLc&fnBI?':-MG.8gbr!ABB
%p_+K2M%2p=I3=IC'@dcd-Rq3O9iRQ"&Hst?,$JXY"I;;!)F:c%'`J74BDr$FJ2T]m'QH9Fra]KV@^\c^f%"2i[.>Y)fZ]u'%n^pd
%!pTlE`1O!"Ld+bi$#QEbe;,N?q%F?$o-a#0.a\O%73_7LBS-$n<!(bVePa>.MYWJ"\AdfuA?;it1J,ab'-(rQ:Z)R+3]&&1#D>GA
%M+W[#'31XN-E9h#LkqH`J_Z)HJLaP'7AO*YAGu^+0Rn[H5b"EMMR`&A5DbD)bW\V<&j(K(9)\quRJ@N(!f.>G#k\4@&:^E8,5t!l
%-FAV%;Bqo@k"hXii_S&2;@,df>"N9("ALS"JkA:tTN[5_:,.52*OhE\Oc8sU2+Pgb'0Y3jT>216G%a;-%jVL3U3\$_6tPP#'3-@\
%U0m%YTQK-gi!*.G&ZHCG`1LH;bb(O8cmC0*,-F/ST1$^MAq)(9I3&;X4+DkBc27n'!2Msa6@Bu;p_-XAnL#eKThSLV)A*E7Ij/W?
%rWK)`,nt@<,*2L4>(7.`7-C0_DPC(Z#[k&1pljod`U&Xr/@359C$/:aI&Qt"?7Z6H^g38A+*[iar^<ZiPX!RK?AG$6A1n!>O%&sQ
%*^5fQd@2RdJmLU986e9A5Jc355=#UK9i*-)>[N:OM2YEX`^n+\3fK2ErWJ"Gq%FT2M%2p=I3=[I',$Q#-`T8%9iRT#JV&_C&ZIR9
%!^iUnNM'H#&q?WM&:^F>#]6<dC.(*Or(2"ciq5kd@4UYXk>.$hlh3WngdB`IQpPbE[8\iXkt3sKmTsF5LdQ(R#c[K)P,T@iZBkp/
%@e`SZS<'uP=j#?s@88tU[^+dP<R6GIVGOB7Q6</MJ+f2/:oJ(Q_>_SG42[;\@ONKJ9.ILglq\P!"`mR!=._"?(/A/g[i%cZ)FE%$
%Fa`!=`U&q%/@"@R;`KVf@p9BiA*O`aOEhuZ\]H(]752b]X8:\O"k-<[T-u:][]5KN-j8?u0"V51q!LC-'U#1:'qOsO;%4kKC(p<>
%b2eg'XWd<H\a._a0P5e[@rXZ@Gl:%]Dsris8u>_^>uHs@+V)%3,YaOq/.tf6*EB39(9*%p<b8QBKcj^DAW'N!.SJ$ZKht=_7@nVE
%o1,Vq]K34\qkG@!='Dk`co'me:E.!7rK3&hp"X$UqO+GBh&qtj:8V"\%8mMqL%lFa,*PNc9%-lf,auat`J)cA7Ig_<+CLY\K%;G/
%Q)1)!E[W2%,?6effq]T]:$'O3:!,5DV+#/*]gM5aZn[Nm-HT@pcRfp8T@!GjD,LjVBM-!5b/$K.rEt;5A26_TBgR`26rR9b\8VqY
%5W5;I"ABJ5d!D*l[aYsoNeU@e;PeH+9hM:]E]lX,[q58@Hrm819f.O[+a8@g(rgBUA?;or(5pd?DuK)^.2@aaHfWkuW5S&)>ToT$
%8u8V7.'BLC9'%&DY=V:8Wf^t+if:'=1X5"'I)eZ!#Zu-#->:E*M3an['TH)VS8XTr`Vr]%YY!+[gK_#+2F0l\-b8Ql`\;"o,\**&
%[og4jG3a@]8Wc2<V4K*X8!PJ:I\*O72C['%X&MVYqIl-DXsfp<;I*0k"C.`u=$c.@qK/!K6HdafMFK(D^5?*f%p2[h_$?u4A[7/I
%[!2-kX6:D?Cm/B\[c\FL1OQq%2n)A05$=_R.*.1/-kq''WDZQ^'Z(AEjaEU4kegE%3;6Q*eg3X,hu\>@$<fqUSkZR3%A@I2dO2,p
%(&E`OQ;\&R;8lI=)UdKiVlZV&(pcr"Z0%W^XBbeqWo)VZH2:p6H6P#7<h`F[OX>B2aTio8.SVIW'_J/#X>flF.TRi^OKX,E$:76-
%SjuV87Skcol/Pdt7\2eNV8_N5O&He7+rWf"o(3NpkkN,5O^tQ-k8(,MJ%"Wd[toF1MWT9Aa-:8.,krcdNL!/9qNS)hZCd,VeL+Bh
%o(!YJ&u:8T>flY>8ZFTXJ/&Zq7H]2t?Hd8s:K>f+8.cC>?-2GGW+p^0jT>8i;?Yb6O&ru;-miGd4h"P*rj,S=],d1Eq'fAR,;!%H
%7&Xu>k)+9&==W&)PU:"KJr`:\-76([;c@eW5Xb'b_F/PMRd_l%V.^,<,?6ee).TXFV2#p;B$'Bd!:mO,%A@FU?(X$(0j>nPlg"0/
%5=Y>#>9ogo9R6D81=*NuRSYO_5`0+(92ju#Qd!p14L1.6.Y[AU8L.">6,SlO3CTD,SYGdr9^5)&HK^hE?`_W`)+r&<9&YQ;W,dl3
%+-F9$FYmTO9N"pFbooY'N+*<@^jUI'QBal=L_09U+i$s<l_.K_-il0aTispu_24bn/>M`c):;9o'Z(h`C)PV+e;$P/)0Z7+Lt8:4
%.9I3G:.nd[0J+`,0J+`?6III*[%a<3ZTF>TcL**F<74r0`#c(XDG]mq6f=^^&*C9!8KP&=aXN_`@3PjQ19LeW1TgmKTGie\acbl(
%>1/)MC.TkmC.Z5UP+Hs#<ceIS2G#Z)fu56$7CMhR1U@6l&-SgQTMii7[&%O.TIn5[#q^rH+c)MR/]\sVQ<6K>d"iBo/1.f9s$!Y5
%FV(c'eP\rLjT/T5Z&@9\a]N$hPK^m\rQal'e)TiS>;-8D:`9BgKj<cL<*(-U"T^*S"dpP;3A\Aq_Y<OOnV:/?&LeTS$u\]N5.`,;
%&A'4l;b25sZ!5TfN7fr-=Deqqb^sf1__E4S"a^dpKoi$-aCUT/Flf<%&>4&JO=<MX1Qu&fI#m>$IqU]qTO]<'a!FIT(mgIR(mbq1
%+mGDMECEAOB#c0,j]ri^$dFqHa*:Dslp6"56:t)uQ`2UfPt,s_J;S;3V?fK5%!@Er4fD$OU"(9;P**gV(RjiL/sN(u(CJ_)HH&?S
%F9H)s9JRCB`A+]L?0Q<ea*5?@KM!D`5S\;Wn:Ifj^e4f$1mc9_6R$0(mh4T+I$aUqX$Hk7,E_4C1uZ8V-q3)I'W`JMN8^r'#fc4u
%A?<n2@qK/^dbu#Ron#>_RR0Qu.c`AN"^Ur*QO4:3Qc`8o,%hGZ'&e29QhWqK5m/JYO[1WWiGi1%$?9BM0SRk0k.IE5(p@FAa]Ptf
%a39-^V8G#/o`][R7"l1C/#4roV6XRs9B?Du91:<RLmb1p;8#JJM)eB>![nk1b^;ta54U"R&Fq./;FnC\+^`XEMqK](=MYf_bX-cT
%_^tl(FRg86'inW@?")]G#V[!X7t<mNML.X]#XQK>J778f!&,t081Bp&Q>/-9-MSCK>+#<+[8#j<>lQ("#8X&Kr6^DT)9H![(MCqn
%JYg7%*X`0*&6adL!a*NT(l[lY#R82#"R$Z),8/CN,%\SYjrOmWB$a-]6+KNs&klKu5qja@5VT1'6II@p"H/:Hb\g#'b5EkR=A%B.
%@:<[_`N(Bk$k)=DKrMFA/drXt#Rj<o#`<4F%,,>F9J(j:-mVe;eUt`cMU-sL*+Hc]29!p,NsV:2Q8+jV=Y'=t7DhaJE9Z.&_ougP
%=CG:V8gD2^8YZ4hYC*eF,@T\QadqoS]Ad_rD)>_:[Eq%80G%85K\pU_4IEYj"h/1o5m+8^amrgnffR)Z;?MJWY"j:QQgG,i@$-S/
%fac,+]9bDP<+96ULcl(RdK`XG&YZA#%I]QfJV$#^92qdeQREFXk`t'Z#b0I"W*bG/J?)VS4Rc!emt"hD"[QIt;L1cum>ZmK77Je>
%6R6/U*ep$_q>.43Y&Ln=q[tD-8Ym#mXcTK"l3aoZ!FMQ[KtBa:Ld8P)HU6[YH\i-W]EVVp87C"@p?eP[;?C94Y"X-tQgKY8Gt#_%
%Am6Njr>i>6!V6*#hh!>ugLIn7"j0JP7$oGLH8"Iho]3hoU,`Cf7$i]p^4^ZdcC+#31S>!_\2obk=I8C2_n)WN6F^9soKk1b)\;.i
%N)n0j8B+gpgbAoXPn&"_4I::YfdK8(:Ee,403=eo&*+AJ.C:D46j3',N(\9<'UP0f73E^q,)[$cftE/[8JQno\Ou*L>dcR4]G2<d
%R,*m`F`k3(#'_X=mdSj\nUbdXLk(aWUA$^O5YiH.-(7at96?!rj@dR[ka[J]0a!:u5jC`Qj'((uj'&BJd4D7r?b[?JL-_r_BZ9:t
%E\c4miJnd@X`V(jj0Z`4auggK/ddHl>I^c+HpGkhNaOE999"aT):&qd1S#h(5S48mS]G7s$bL%.$WSU0-'db"[t<HjPSG(<R,*m`
%2069;"t1uBmdQSpnUg=+Lk(%CUA+41X!]"/K'!&>6'i2rq(dgR3bK'ub^^lKO?/NC(`%;@(m\,eaH`fj?FCU@L&nBsBZ9=uA?;9<
%*A[[tl#;Eu?\oS`B0o"J-ffRAg^<,\i"Zq2a9nr3#fNdrQ&(s0.rg/?JD[1m,Va<c484geWIaOg=!t[kbBCjWXWeu)ZSRcL7Lj(T
%!*c;;).9R#@k7$]ei*_M_X[oGC+BjY#?co9'W;X1+p-R5@YN>A-*4>:i@;VgXt(*j<.\31.>.+>>cn4,Opd_k=t=j5+L'!-R@%9A
%N5]\E?j<hb*A6ik.M9C88r/"/6DF4/XmgdlJ>tA**umEif*;WG]a\p1;)Qg%U3mZ*JCKB+7]Bqe*_I_9&2rXmUc3&ASp1fHA>E[X
%7`*`iB7QpYiXCmA;JQ8%U6$KjaRrl@'hHK"Voni["p[bW1_G:j$(Z[tM4@I.8/2hYV'=7'VU0pM9q`1DUnh7AO]KgV&"&67>KfQ.
%fQqd'JZ2Nj]Q7[kb1og\Rqm>2Q3J>/,ZtOK<U/Q-P]/'mHP>3*K8hWrBq>FjM[iI^_7BWO;YF/65$ouoAT,)1V[ufmOeTMa1sBH5
%8p4"7P`u/'8r?#%3^U&MA<^Q368I--AT9A_XHX]57\q5S+cnP=(a\Bt3%;q(81A4GYUHF]!Dt=T;G]2Y;Q>)CJKb9n"A"p#TTnf8
%3@QBY:m@3$JFnOUWQ7WLm"JuOGf'n<a/![]M38Jj!(#%`K9VHDL_PM1O;-1k6ko9LJ;BKs.>V16.HhkU;oBE,,\!Q[kDVr'"lQ)M
%7KfM3N(?CW-tYspA!J!n837t@LRS;nE<*Kn%6-*L=[YbG9Z0FeE<8KnP6ct`$'#XL1E6Q;TE^:`16G(OPjG%,-n,3GPa%#ToS)P.
%a@O9cN(Pi@\7(?'_bkHaR>hh$!'*A2THn%[(^2W+)?n(d#6dgG+MoEW8d*FE'Pr:<1a6KTO2ra&5D)g2"=PZI'*7>*K2IbnMV/ig
%=PJQbd`t;'iFXW5HiVk+!TB0&78+E66rXj7-O:DCM1>kuO=1]#,>kZGC=%d$M*-BaY^^,V:kSgF-rU32$SbM@Oc%g/a]R,K1")(M
%al-hU8pgWc#Q[5RO@;-nLl$[2;&ndIdA-u:E1)FnJMR`=)k[Cp8=@OD*X_cl*"#+?qh-^NJA)R)'cF!<NKK0"D&=Mb1mAttL7uNj
%@#PX.$40j'6A_(sKi5lMn4>Jd!@M+VTg[fI6GWl)5pK8Snd'rdreZ;k,(MgJR0]H=6pa=3.V<09A"aj]837)'LRU:PnGs1G"<<&I
%,_D\^-,lNVDiT*@77ogUWsk5kRi*W!5RPkgP__/jTOdL"5tMA*Stnm[Ua$:677J_<;^>k4)l?.f",2"9LHo93f&9&"[rD*SQ7\>N
%Jr5A7K%'pIJf#(2`=i0'<=?d<FG[jLTJNsX6HheW!")L9b!4i'(#huuL5!D%@7'c;DcC1(5Vgon@=Y`F:NED%IM1$1/4)VK,@hD_
%Uph1kT5[qPW"Z<@niQ8N5X($pR='VKdCr)G7-"sW,eI^]8P0!G,W-bgrF#7H1.j9j,%7P)Bd]Nl\/BZl<sVJf&I0:!Of0YkM7=ph
%:*:q*&cpB45u5ie5u6PE.=so%@6RpC@o$ciW@&A]_?mUoJfZZ>'HONI4d*&"m;tZjp/X1uIUq^mDf-2?VbACo1a:G3,Vo.*DmBJE
%&G]l*o7Mg*OA>LH+LkdV82YdTjqgJJ9&]BMpSKA1p^o]Tj&JqpO`s5c,3)I4JbUVB!T"-j;T/6a&?+f[`U&OoXE)K^72d$l*+FYq
%e-*RF1a32<Zp>[rMMOMGeXD"aW^i&)CAF,lco8]q$9#[mUGO05NKQ],U!Nr&:oFNl'<7mblP("0d;b)r)V&B"F2JnF8##Wp',(OJ
%.!)0riKB9N=Hpsb\0t@JE)<Q.NJN,\j\_+#hB!tdd+:d%7,B#>/:sY$J#8u;#&#EL8eKZ"#,It<(:-;iZ/,qBUn*UanRb/rISff1
%,6B8:OXMZD'Oan>4MdakSJi(Po4t-imbW;d`"i+m.?2E<Ul\-K'UiE3$C(UO6F@MISRPnT3c6\L,T4e_n4D>b.3*7QVVhemOUqPs
%KLCEh<)Q+YWUb_*;KZ_B7*I<K'"N@-PS.']/#<fn4/J$0kS0InFpaLbPsVkmELgQd.QVH%q]m&[iUBFmq'd;%#,pGe7?\8`^4\m`
%W)QXt;5s*hRSn9C6q#8&Q4g`Tn!4Sfkf]e6_:tfJ80jHY5q&"!,3Y7lWtFS1d8\M5MqKK"=<*)ldZ.8bGV`,!="(&$#\YP1&lJm)
%0iJ8;JY@ZV.H3b^]jsarm_*1(>bS?h63QbF66^t\g'!O<>)A>?>-18i;Zp/ja":nq,\+M-5"RhAL#^F&'jRHj&gDjqO@Y$>,fPQS
%.F0/;UeX=JLqVD7M;5f=9o1CmKi<fcNDi@nc:XQKcjH$<X?s</O\QL('cjcNI?KP#Fnd6LYSE0WdoLFAZ:p&[mY!\(Y#J7j>`nGp
%8k_P//g:q*(Jfn=]f/`D-1L1K"Rth.j:QQh#+3"h*T4"q.n*^((qkfe=j.pY`[X&4P'6OkkA2,cV=VF<2IX9ekU.pJ."A's+ok7^
%-bu"i;BqoBIK^He9B[Bq=;m<g:gkhUhElo6/k9@7dthI8H5R+,/%s<On+%Tq,aLYa1&E+3/*cUkg/0C@CM'hZ!@=9J!=a`N_Qi;_
%"?_uV1`V%Bf*he$f:t!o&oi8:UCmsul_kB2ql#TI:_m5B.LUBL_Et49E?/LB.lq8sHR*$8lY.`QoQW0\74&'*6m:N`O@s\]Wf$9s
%'qaDd.Su+\Nqp(^:cuLZ8r\B<;c-*B9SHGX['UR&['U`*=^!S7Uhe1g9c:cl/Q5<pRX7(]/c5#T9[YVnAY2hP\K$<q1a7I7,Vl<0
%T3;>V';uX.520cu?s*ZnNF45n,.6o>c(J+N*):?*W+DUf_p9&i*>FW>-':JFZp:9"l2[-(=t/HW7%dS&b[P`b1)AVUXuD?5((N'O
%>&",3:Dsg-$JHV!91;7AQ>0-u/CgLb7(!G<6/Mf[W=>X9MFb.<aIj<;?r.5r!6[^:'QK[Q:b+SE0j>k?lg(cEb!@UBg]VB.'FI*>
%6m*p($E0eA,#Cp4-WlZa;^3Jo#.5Rr!OZ;?e3FVF'3PHQ@K-aNTaY=3.$Z!Z7gs-$7kA8),\(7'#"^nTL#^FN(AsihP=>\966^ta
%.ObG,<-a(,WB)m\,%aYEjNaD6>_,Kq,1Rm"5V4h/TGB!XQA''&i]>&O<cm,+p.7"Tf&;h"K3C7k$u3TnMEW0b4:6oJC8n!7e5GB7
%QDNlrLkqEa/Wi,I>&XWpd0Qa@,(Wp2JjCtf!\=`0;T*^86*9@\`U&e!/?H`:Ba;%b]G]4N.hmCu"F(Un$.MjE&ZDPK'.cf,W=]^s
%K3BIC#.<@r<2't(MaRWSZj?fAZkC3\Zs&G[V[1e0Na'^k8]JV.I$/YL$ce`&/\"-p-U`JT+d##A8;]\b-kBDqe4C6"@Lps$\ML/f
%=.g1cTNWTRW233"W25abQDN,H6omc0<cm,+p.7"TfAVq#K3C7k$u3TnMEW0b4:6oJC-b`+C6A)X_H7OPi\'4Ym"&=aG6YJ5$<3`3
%</X-G[Bp5A[8716/6#7SknJ\Pd;b)t-coJ4LJQ>.C>jCnW!-6Nre-(=;TL(Z9,4:r(?mG!078C1&J5<_W$PV[:^`SN1,OMRO[l&[
%)IQALFTBTOXV>b<@SeR9AheWX)2mqP8D6?]S[3=/QHo@7s+L%X+f)>IU7dfeM*NYXS7#JL99"aR):ZN<M1SpB1uc[)WF..h1L(F>
%d\dZ\[Ic3iJm!DnPMbIf6pWDSN8jLt4W,d8n3bnq/KAO1[9s$ST+D#IKgZ!MkV`R:Q<lBfQ_i:B"E;tfTU(D'5qQ1=<G2N#,*>,B
%[(r=Ml2[-(;CUTd`1U.Qb[U9:_Ud;e%Vk7uAl+CZ!q(n36:W2c5V5tNJQaNe_6R%5)A*uGW!1-RW("^f;E,p*,F(PHD1t8-XThaj
%Q:rId)M;3l7PJGt,](^gSY2:>U^8A(^$cQ?F#eEh;nkk",6CD-,(j'BFsiX\,uDc[1Bl74^p<<+<%qlVOa8E<!k%CE<\O^DJQd4$
%/GNf[e=dJR<>$2!643p2TakI5W0JR07g*Qqa"1h8,\+)bk-38>C>f_N?RlBqi-PVb,'Xg/6(jO$Ld3QBRUB9u7u`=>$.Mk$1T1Hr
%TG!5T[?AV((7JW-$^C_86F@MISRPDG3c6ZV,8oh5YXZc$/Nqne/V@L>rL-$3#UG*l!OYm%"DXq$"Ns\SC.&1uTU&1jTU+4rCX@me
%M(A_9Y^Zkb:^4-TPY)P>,6kQM,8RUOP-M5$K;9O;_X[?6FAVn.h`@\J_5!)_TU&3-5V6!-?s0L)NJNAse:QI=:eP&eQ"WRc73[:d
%BS&N%<!"TYePa>.MF"B.\AdfuA1Xh"-YWgnE4imQ+;@o@QOk>B4:6oJC8n!7e5GB7QDNlrLkqE`/]c`M[DWe`#pQ;`M$.Re#mRe6
%$*Ys[9+fc)#.:2c(:-f"Z*4_1U`It%nb0\[:gB^O8VdZA-mTG(V33$!99gl,QE!k.,%:V]+En@G&m&`mLnIos&u_X$&?)Fj#aV=;
%C.(*OTN60i@eNAK(=qH.["DOAhVL1*MC\<L$5!:[KgZ!M+=RN&TKHUb:a\]%L`+]ogc\J,>bRE*JngE=TU%K%TU&V&=I*!g&a:!\
%>1%>JfdFmD>_c,'%VjsIHXBl'Y0_)<6j.`K&dd'>U_qT*jlQ03EF<rq`/0jI/]c`M[DWe`#pQ;`M$.R-'*N'D&n"k@Q6Oa+!k"c_
%(9:4<\R[8&_^B.'[;`dlmk5AVkSG'[,(p[$#h2a@.B#\HbNW*ZiYA7A+qdpQ$X39i/[5H$5QI&nO$G9R^n;J.!1&=B.H5ZlTN60Y
%@eN>J(>[r3["DOCB-UbrLj<A'5!uE<#U+o`&d>[B9*B"/j93Y(=_^@S9;%TRQ4U!KV%G-Y;o)?[B"/hZV,&<CC?]:\"LI_e-bmiW
%Lk8h0(rbisA?;`I%qu9VE3-`k2\ZY`f,Gn86jebRC=-l(5V9Z_3%dk-)$o0'#G;jNm=AGM!NcD8</O'F[Enu->,VO*(.tEZlO\\P
%d4pR4,7.RY:HPMOa4pKs6T#1am>sY$7j43a/QEO:=t2_PZ;dJ8&KMO`V2An^99"L#-mSs@PsI!=Kg@;m##pnS9HiX=K3D2C0P8KR
%Cs>,6TU).m$mtoje?X.e_:enI-]0lK$Af1+fic\[Q@qN*OqC^-:ol+3'hm<7V%&EKF.j$Ke?W#g_4;<n>'?c&QT(6HX[==2X!BI!
%KbasD663kI:b+t>NsO6mN`jTO8B,,N4I`5\eA<A@:eOM*kS$B)*i7R5:eO5FTU'=eYUn<L,#BkB>,lKB[F>DZ6mGU3,Vl<P-5b6!
%-,?f_/O`pB(t=G'>KkYh`qh`tO`F8k%l]&C0EhG)ME".!'*Zl`3>&3dWY6pVQ&,bL9V@\D>sL!o6#4i'e;5^X[BP,b[87(3/<ia=
%f-:L-U*CG[6'ALW%YLPteAC`f:^_^PqEtpN7qj/u=t1s&[8_F'AZ7^&JVXW^K%q6nJh+2@NC^HJ,Z"kC0W9[tJ7YEXMRZD9W"g>^
%R!k-VKm!/9m@Y5T2hP:Q"jeWV#Tfh!"DXp3#h2c6$'qFQ6j+\\:^_;V:^aGQ8e=:r80h">9e`N"8q:KH>)Kgb0rPg-\!VT,N.lEL
%,jh6?N]2SoE!=T9N<gT%M$.RmU^5IJjU%6Ll9kb!-;Y(jB2Au=cq4j8[7DQ>9:I&#9.LT*9<6U!FG`>ckd\UtPC,,$f&;h"K3C7k
%$u3Tn5bBkWGa'NfW!,aIW!28`bCVc4+sLVq$Z]lV$a.iK&4*]p,Z%.'+Ab]]&M-SUeVJ=)5cs7[`U&e!/?Zl<Ba;%b]G]4N.tBft
%7.;U!,Z"l3@ShuIQ`"c<Q'[Se&J6aM>*(gu>&]0rJdAAF,(WqO"G'aT"BZG>V205N5cs7[`U&e!/@r_HBa;%b]G]4N.tBiu`">n9
%8"c.t8jP&WS\qa(RhC:*("@id):X6a:^.!"'R9grT`GA*:^=3Ue4L>),6kQM@huC@P-O3\O/*fGdQ&6OC?`C7j.CG,`">nY>b[mW
%C5G2-Q(25b.SE1&?37NV[7!;4>oJh\0GQ-m@YW'W>5C(MTU&p(682%cFRm%+La]4`O&=,M8B-NJr/c(u$ce]%/Q`#JP=>\;dR4/E
%kV`R:Q<lBfQ_i:B$0YY*5V7e]5qQ2(X$?fQ,*>,B[(r=Ml2[-(;CUTd`1U.Qb[U9:_Ud;e%Vk7uAl+CZ,2<ieEWW(./qI3+.K["W
%I"Gq/5S8R-$.Mkl'<"@>5UdD1Js"3KQF=Z'Q<");91u.DFH&Sg.3f\9AJ2H6Sl/D.:AX/E5,VE,LJ)='5&!F[.$quA<k7.+dL"C.
%M\`_Y3t33oA_/ekofnG#o&2>I;-J.6,^AT^9$;>3Te0.G79lZ[A4d4]&>b(A^gp$9'QF"Z88E7Y@Q$Y1f%K/I,F+4R42N&5"oSOL
%dYNENU'r6Q<'`oc6"bdZW>#qq?jY1XBbR/9%Zi_"ibCn+"'TAi!A.7P*(u0cJErB=B2+ChbcXLVW]FCIG!&EX2Ubgg#Gn"K,%Qr!
%$(Rhq+ufsf',!r,M$UI]CmM)+fISu_'i;hKWEI/O@K4P`Ta[#b;CMcSIloQ'EjT<L7P\#miJl?N=mg6U@$Xn\;(%>/%OHD=AZ;8W
%bC]!^_GXed!rWat"f4#@"[epmMRZhIOg$An_,qI&!JDc<;S[FsUTu5e/7+5KP-KfQMkhE:EeiCZZG[;H3?\G:9(E80;EYVT"k<p/
%V8>V'qB[<n8nT=UL-QatO]jW)Lb(C!6l%6QIjN'3^ida$Z6mUCAr@pEr>ZSE4ce\7[teIM+V\l^";$gY&WNW5+rUih'D+nNM$W`H
%0G]nu0GY(J3]&%gC*LJrg'#5o>)AnR-rpGu-"aD/a"1h\,\-'Y(.gZHjUSai@Yl7mD*eC'PN3=3"[+Sr-)q&i"^u.6oZJ3iPg16a
%%"UGr,.2/0EELotEEHD$:ff&G"4AL8YU7CAAr@pEjW#%-4b_u-[g->u+V\]Y"R)'1&VC6M0nZ=&F2/Ls;^.rC7^/P-7^-8+e=dJR
%<>,\TdO#7966uW7Uf[spQ^GRW*4)"aP)RA%==!P>Q93kCIjKhGWX07<T-TEc/!Z=X=/n:$>*1?^!qe$k"dq/p"ZJsa)N[!;O6A)N
%_"8B,!,EmW;S[/;_,li\'sg&dZ&T<@Un58_R2J;o0W?Qj'@oI&H'2_M-*L9=6s`/sJm#&s&V4m-][Bdk"g<$i_\Jm:]WOr!_fF\#
%5'\Q$V&-<H[)1?fI[,Zuii[NR@^\TYf#M3Qe72SJ:j^]WW*`[S7)1lU*^NkLk5jcRQO8LMl'4R:HCG$!$G'j3$L1+j)Nd'<OdIZ+
%^s!PY!+@1=;S[Fq6`qcV.qX,RCo'8e`0D<[&%GMeJ7#%4:em0G]Tl*HGUj%qi%!8(,*4M;<[r:0XiM/R#_uZqR``.*[_fP><Wfc;
%'iRL]k0[4ld>Q[0$!T\k-Z!AG]Lr!)_5".!dTE`"X:1:^KQE;E`i\TB=n'p5\<U@,$eD^O=4r;@@-q/CG5[J1X%M&.KJRFU(DCT'
%K%?Rq=!l?4[0h+QS/'`_<eVGL,!@*r.QUTb4!GR.k&OOg7a_X!Qr,@K5O]tY#iYu(&8S*d,1]Ao->8\0&Wonq6s?RqM6qm6V$[[A
%6BT9X<Od7-XAAqb.TEAZkmUKkdIE+G'#eC_PJ\"^a/noP'5%J).)D\kTq%2mTU!ZV5V#j*E)io36pgPZAu-[fbY!85p,1c#e/X(A
%_Hes+L#rD8TgXl2:Dg?oN`=6B8B0pSN0/;'$HJVZ/,2BG-&i2cKLDQ9<)Q+eWU^1l;KX/r.[V&'#b;h`Ylh#QJ1FUJLp.6\c?L'R
%!)8.s2'ST"^+)0M1&E159B5M3g&W]DD^MRD#,RUs!SN,o6EF-aKNP5EKW%dk+qcAm!%S>G!@tDWW^&fVeMP.D_S%a0KaN?.Th:;8
%B,Ie/N`XI(8B/5#r/l06$HJY+._%d,,t*8@+d)OLPn`agW]\+s<1Shu$7<=k6>*l%m!pPsO?tgafIF@S!ir[0iMa+U7*leqX.nVh
%ZTjVX-k:a&*Nd3KB!r%a:gOG?0MP(`\-eC.\-g@\9*KHQ,Z$1i<WBOto4bJ)kbIWRaEP]Pb:Fuibu,^:&5^2k(iY9t87Wp%hqiJ4
%3mW)S*UmqtqY'@%Ol*9>e`TWPgj42O]$[P-!>c"rg+e.Yj3pFseNk=X\jTs__Q('-27Xh+\.tn`8*?msh?L#o6X_8TJ0kIh<Y6dE
%<D)*JWKb[VCP'f2&Ti(oW<4aa@^KX>WlCqEWPSZ='eZPk))5.Go:"HqI9`&dO/#'B4E".u[%Xi>8q88NKN0m,`N#075uB)#;,6p=
%<(4q=<M^).^qXBb;aRKZT5C0WotdQq==$$`:piHeakbUi4ZV=X3`4Gr@Ko`\mr-)nESh@sM<g0W<R$\oW^\TH<F^l+MQVc8hKG-^
%ibi7.i%*XBZ/8XmSne22;4+AeWtRYH(Y\XCIqY(D3^9+U4kRda3'B5^:;sOt:IXp!.A=O40dr\e^NKTVod)<mWkK]%N*gS?WJIs%
%Wam1V#Vk!e_,R<C2bD!bJ5]ROP)U<Tg7HjUDX?^Br9,\3T=85YPlj'=;A^`m78l'DU8]'F^f([jask8<WL@t7<,G$>8/Y_qBTd*]
%@#V*<J>R(h&mI+]onAU!>Erh_]-BNe8@;_%5.u77oF.O!mYFqhU4cF05YN%P8@@4kY5o8,[G5&k:^>Y&EkT0c['0&]l05+N=K:J_
%I/U<eQ>3s*?[oZI6d"o@TP5lV&5\&kn0u"Nac6L'D9m$=1\Pf[Sp/3eJLV_GJZ>"9:8pi^-F+efWZ`!OeZ8qHC*$5CXdH-N>>/%4
%&1:A1>6[f%Z%TqCS:FJq[RrGhY\JN&PH1sLqf/WUE3Q@'>@82B.(*##?k\.nWu<@:<D?aQW[8C5!/msoeAG<a#<YNp5!((%MU+4h
%KahuNXB*H'$s7@BCiVi8EC!>cNXf1]]F@ujLN6$fJi5>3^oEM0@+F<AVeS7i#dG3siblbn<o?BgE8*ZU<\.\+$7B4]\?1og)78+h
%gZ4smj.`'8*$)EGGoO,b($1cY5b&Z*B[oW[Ztf/`<Ag<qKNP;jEAqZ%.r\B4DEB9#MBr[9i<6e#[oK^_"'=5uS(s3U>aX!(UB=R[
%DZa(JU)XgRW"XdbXr8_i=&!#jWhpG`&<"(CmUiV8"\u)9D$NL8FU<V#FV;ouDGf&N^oQk5:%$+e0$`_'dD7?)\%sRu;4\'tjG?0R
%=%(3h(!-Qa,+V^H@^B.Sh<YlY^e'g$m@`[D/g14q:4c^#/IIs[J@.PLaZ\=t,s"1L3e53@2Ln4Hau,lC4u"GcMb"`$;Xt$0V0#0u
%Ls9<>G;E@.![h"-[Y(<Y\qE="S:Fo([L/K:Lp]CTaZ\=t,s+7M3f(cH2MadPauH)JJmqIt<YJIE9=Z"oQ*M9]#a`LSlXmE#6u5hY
%e'<fi@K?R6p]/(GCR+8-5h>YQ-?iuBQgJnUkWi1`ZPc#/^\83(`-k3j.'?2MA2R!]Z5U:3=,eL5knTE4gQF<p]c%bHqGm#=g2FJ*
%Q.<W=$>/rgFonrFU)X-p&!;HHk@ZW\&'suiUJ;nk%VG74%;&Ig1/B<+;%*fUd]XgE=aaum%]f&W#lUk12N)ODc(Y9LW"Q!K'V32M
%#.3k#NeQ"5foQ6:m?p]:aNj5)Nt,jrGoP+.8V!BXKoBJAJ6#Sp5c`iONn&ZSOCL"K9tV;p'dHa1%Ds2DV:AQSC=Nbm<\7B^CBh2\
%E.X9(Za2af@tIklAb"j'f?_c.XTc^H_cuo88cYh!Sq1(K?C^"+:i##Xf$=?>>$-s\1TK4m4%2i9f#";sI!P>]%+JGlQ8Q&EO>=I(
%BMaU%"DZlt/.8Wb[B_$.>2(j&gl-Yd[P*=o,,E3<25Jb(J3?m=)FZ7eBb;IR>0U33XC`&u`!Xq-[KUBQ!c]FG8SG=_BLn%-$u+Z'
%,R_)8['D,J>2++f>`4$cXfo.B!78=NEX9pa$:UPd"H-_#1lDnOc"bf2@Ps2p`)^PP"!0:W'&Z'u:&\M_1*nc8cSq;H%6uJG(<t!^
%N+Qp&CiV-$EL"8hiW:[sg3[6NM\["HWY,_t5m(6m8O->J(At2#6m9,CZ3\!l/@p?F.Dp!-"_=lkJLm=A?fAFY<]4M3CO9r_gTceI
%oX,\U^f]4F%V&U_TjSN@n.UGoYR$CGXQD+]<ATIuFG4-8Ear3n!@Ln,[Y)H$=Mbmj:4TKd>7<$O15<2"\&n$ia0k`sNXHE"CN#!e
%/%SQI#mKCH6,Qb,8aoaO(=]@P6m9-nY6_\t/%U7p.WO3/_,jo/n5Z"^[AmHh.lJ^KC3si^gTcg_o!KJSJ61@Z%O5%sTb%kETG)rI
%XqE!)=6'h+MG.&BFH'N;E[+Y-!@Ln,[Y$oL\qH0G3XK1o[ieag9$#QVga9L?+4oRh4"e=NY.Yh[Xlr+!,o#hq"q=`^8-Z2\[t.O.
%P>MruK3!Z\TG:bJ8X6gQTKoP1+j^QD?ra]gBZ6hO>&DT&DED1kj3i<l`s%RT[C=%u'jW5pKG(GE3TF-#W-FTU2IJ!\1((iL?:D_j
%=&FY'W">kt'4/WZ`iJS09SM*X<S<N)WpQ3KDT4lCb1C61J6#s&1BLSL)r%Shgi%jXid*sg'aYLPeY!)>C)BghXIuTMDA9,9<Q;8j
%06)cpIS2PkWrA8\W2d&&'1CB;g463u"/A]Cq&)nE_*2bOf+qTk<*ahYN)C8c!_Ok+9FMi9l7X'K<..%@EiSS`#lVF@P_r!NV'>]E
%W"Q!K'M?=O7]GkX3/,nW<8!@1WpQ3KDT7]S^G!C$Y.bbXW)O4N,Y=\qQo.,tQ3:#AEl"Rj9,,f)J>tUG5c$N[MPV-"@*bbPWiff]
%Wc"K+C:O<Z>;JP;KbKt]P^V>BT.qNKs'm!#3M,""n)$>-Y>b8K3W+!5#64SF\"<o>q>U3Ef,oHeF8P^frStqjKh"Aa^:X:<rq<hq
%GP;W^HM?[tcb"tA+$Qbj%=\?TT,t_Y^\dZDa8<K(T76b6f:jf`$p8k.qM4M\I.\#1Q6#>~>
%AI9_PrivateDataEnd
